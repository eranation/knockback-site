extends _jade_includes/layout

block title
  title= "Knockback.js Tutorial: Todos"

block includes
  link(rel="stylesheet",href="stylesheets/tutorial.css")

block navbar
  include _jade_includes/layout_components/page_navbar
  mixin pageNavbar('Getting Started', true)

block content
  section
    h1="Tutorial: Getting Started with Knockback.js"
    div
      span='In essence, '
      a(href='index.html')='Knockback.js'
      span=' bridges the dynamic DOM bindings of '
      a(href='http://knockoutjs.com/')='Knockout.js'
      span=' with the models, collections, and routers of '
      a(href='http://documentcloud.github.com/backbone/')='Backbone.js'
      span='. Well, it also brings some other cool features like localization, default values, and nested view models.'

    p
    h2='Useful Resources'
    div='Before you start with Knockback.js, we recommend you first get acquainted with Backbone.js and Knockout.js by reviewing their websites (above) and this information:'
    p
      ul
        li
          a(href='http://documentcloud.github.com/backbone/docs/todos.html')='Documentation of Backbone.js Todos app'
          span=' (but skip the section on views)'
        li
          a(href='http://knockoutjs.com/examples/')='Live examples of Knockback.js'
        li
          a(href='http://channel9.msdn.com/Events/MIX/MIX11/FRM08')='Excellent video walking through Knockback.js'
    span='Also take a look at this '
    a(href='index.html#comparison_table')='comparison table'
    span=' between the libraries.'

    p
    h2='Minimal Study'
    h3="Knockout.js"
    div
      span='Knockout follows the '
      a(href='http://en.wikipedia.org/wiki/Model_View_ViewModel')='Model_View_ViewModel (MVVM)'
      span=' design pattern meaning you specify a ViewModel (Controller) in addition to your data (Model) which encapsulates specific data and logic for your HTML/Template (View).'
    pre(data-for='cs'): code.coffee.
      # View
      &lt;div id='my_view'&gt;&lt/div&gt;
        &lt;p&gt;First name: &lt;input data-bind="value: firstName" /&gt;&lt;/p&gt;
        &lt;p&gt;Last name: &lt;input data-bind="value: lastName" /&gt;&lt;/p&gt;
        &lt;h2&gt;Hello, &lt;span data-bind="text: fullName"&gt; &lt;/span&gt;!&lt;/h2&gt;
      &lt;div&gt;&lt/div&gt;

      # Model
      model = {first: "Planet", last: "Earth"}

      # ViewModel
      ViewModel = (model) ->
        @firstName = ko.observable(model.first)
        @lastName = ko.observable(model.last)
        @fullName = ko.computed(->return "#&#123@firstName()} #&#123@lastName()}")
        @
      view_model = new ViewModel(model)

      # Bind
      ko.applyBindings(view_model, $('#my_view')[0])

    pre(data-for='js'): code.javascript.
      // View
      &lt;div id='my_view'&gt;&lt/div&gt;
        &lt;p&gt;First name: &lt;input data-bind="value: firstName" /&gt;&lt;/p&gt;
        &lt;p&gt;Last name: &lt;input data-bind="value: lastName" /&gt;&lt;/p&gt;
        &lt;h2&gt;Hello, &lt;span data-bind="text: fullName"&gt; &lt;/span&gt;!&lt;/h2&gt;
      &lt;div&gt;&lt/div&gt;

      // Model
      var model = {first: "Planet", last: "Earth"};

      // ViewModel
      var ViewModel = function(model) {
        this.firstName = ko.observable(model.first);
        this.lastName = ko.observable(model.last);
        this.fullName = ko.computed(function() { return this.firstName() + " " + this.lastName(); });
      };
      var view_model = new ViewModel(model);

      // Bind
      ko.applyBindings(view_model, $('#my_view')[0]);

    strong="Note:"
    span=" ViewModels need to be unique instances so Knockout uses a simple function with new to create an instance. Here are some equivalents:"

    pre(data-for='cs'): code.coffee.
      # Form 1: Simple function-based class
      ViewModel = (model) ->
        @firstName = ko.observable(model.first)
        @ # note: need to return this/@ since CoffeeScript returns the last argument automatically (which is not what we want)

      view_model = new ViewModel({first: "Hello"})

      # Form 2: CoffeeScript class (allows for inheritance)
      class ViewModel
        constructor: (mode) ->
          @firstName = ko.observable(model.first)

      view_model = new ViewModel({first: "Hello"})

    pre(data-for='js'): code.javascript.
      # Simple function-based class
      var ViewModel = function(model) {
        this.firstName = ko.observable(model.first);
      };

      var view_model = new ViewModel({first: "Hello"});

    p
    h3="Backbone.js"
    div
      span='Backbone is an amazing '
      a(href='http://en.wikipedia.org/wiki/Model_view_controller')='Model_View_Controller (MVC)'
      span=' - '
      a(href='http://documentcloud.github.com/backbone/#FAQ-mvc')='inspired'
      span=' library that handles data (Model/Collection) synchronization with a RESTful server, page routing, etc. Unfortunately, their Views becomecomplex to maintain when dynamic Model and View synchronization is required (which is why Knockback exists).'
    div='These are the basic Model components from Backbone used by Knockback:'
    pre(data-for='cs'): code.coffee.
      // Model
      earth = new Backbone.Model({first: 'Planet', last: 'Earth'})
      mars = new Backbone.Model({first: 'Planet', last: 'Mars'})

      // Collection
      planets = new Backbone.Collection([earth, mars])

    pre(data-for='js'): code.javascript.
      // Model
      var earth = new Backbone.Model({first: 'Planet', last: 'Earth'});
      var mars = new Backbone.Model({first: 'Planet', last: 'Mars'});

      // Collection
      var planets = new Backbone.Collection([earth, mars]);

    div='This is a Backbone router that can be used by your app:'
    pre(data-for='cs'): code.coffee.
      // Router
      class PageRouter extends Backbone.Router
        routes:
          "earth":    "switchToEarth"     // #earth
          "mars":     "switchToMars"      // #mars

        switchToEarth: -> ...
        switchToMars: -> ...

      # instantiate the router and start listening for URL changes
      page_router = new PageRouter()
      Backbone.history.start()

    pre(data-for='js'): code.javascript.
      var PageRouter = Backbone.Router.extend({
        routes: {
          "earth":    "switchToEarth",     // #earth
          "mars":     "switchToMars"      // #mars
        },

        switchToEarth: function() { ... },
        switchToMars: function() { ... }
      });

      // instantiate the router and start listening for URL changes
      var page_router = new PageRouter()
      Backbone.history.start()

    p
    h3="Knockback.js"
    div='You can use Knockback to bind Backbone Models/Collections to your HTML/templates (View) using Knockout. This allows server or application changes to Models/Collections to be propagated automatically to your views using `Backbone.sync`'
    div='Creating a ko.observable() for each model attribute by hand:'
    pre(data-for='cs'): code.coffee.
      # View
      &lt;div id='my_view'&gt;&lt/div&gt;
        &lt;p&gt;First name: &lt;input data-bind="value: firstName" /&gt;&lt;/p&gt;
        &lt;p&gt;Last name: &lt;input data-bind="value: lastName" /&gt;&lt;/p&gt;
        &lt;h2&gt;Hello, &lt;span data-bind="text: fullName"&gt; &lt;/span&gt;!&lt;/h2&gt;
      &lt;div&gt;&lt/div&gt;

      # Model
      model = new Backbone.Model({first: "Planet", last: "Earth"})

      # ViewModel
      ViewModel = (model) ->
        @firstName = kb.observable(model, 'first')
        @lastName = kb.observable(model, 'first')
        @fullName = ko.computed(->return "#&#123@firstName()} #&#123@lastName()}")
        @
      view_model = new ViewModel(model)

      # Bind
      ko.applyBindings(view_model, $('#my_view')[0])
      ...
      kb.utils.release(view_model); view_model = null

    pre(data-for='js'): code.javascript.
      // View
      &lt;div id='my_view'&gt;&lt/div&gt;
        &lt;p&gt;First name: &lt;input data-bind="value: firstName" /&gt;&lt;/p&gt;
        &lt;p&gt;Last name: &lt;input data-bind="value: lastName" /&gt;&lt;/p&gt;
        &lt;h2&gt;Hello, &lt;span data-bind="text: fullName"&gt; &lt;/span&gt;!&lt;/h2&gt;
      &lt;div&gt;&lt/div&gt;

      // Model
      var model = Backbone.Model({first: "Planet", last: "Earth"});

      // ViewModel
      var ViewModel = function(model) {
        this.firstName = kb.observable(model, 'first');
        this.lastName = kb.observable(model, 'last');
        this.fullName = ko.computed(function() { return this.firstName() + " " + this.lastName(); });
      };
      var view_model = new ViewModel(model);

      // Bind
      ko.applyBindings(view_model, $('#my_view')[0]);
      ...
      kb.utils.release(view_model); view_model = null

    div='You can use Knockback to bind Backbone Models/Collections to your HTML/templates (View) using Knockout. This allows server or application changes to Models/Collections to be propagated automatically to your views using `Backbone.sync`'
    div='Creating a ko.observable() automatically for each model attribute:'
    pre(data-for='cs'): code.coffee.
      # View
      &lt;div id='my_view'&gt;&lt/div&gt;
        &lt;p&gt;First name: &lt;input data-bind="value: firstName" /&gt;&lt;/p&gt;
        &lt;p&gt;Last name: &lt;input data-bind="value: lastName" /&gt;&lt;/p&gt;
        &lt;h2&gt;Hello, &lt;span data-bind="text: fullName"&gt; &lt;/span&gt;!&lt;/h2&gt;
      &lt;div&gt;&lt/div&gt;

      # Model
      model = new Backbone.Model({first: "Planet", last: "Earth"})

      # ViewModel
      view_model = kb.viewModel(model)
      view_model.fullName = ko.computed(->return "#&#123@firstName()} #&#123@lastName()}")

      # Bind
      ko.applyBindings(view_model, $('#my_view')[0])
      ...
      # Clean up
      kb.utils.release(view_model); view_model = null

    pre(data-for='js'): code.javascript.
      // View
      &lt;div id='my_view'&gt;&lt/div&gt;
        &lt;p&gt;First name: &lt;input data-bind="value: firstName" /&gt;&lt;/p&gt;
        &lt;p&gt;Last name: &lt;input data-bind="value: lastName" /&gt;&lt;/p&gt;
        &lt;h2&gt;Hello, &lt;span data-bind="text: fullName"&gt; &lt;/span&gt;!&lt;/h2&gt;
      &lt;div&gt;&lt/div&gt;

      // Model
      var model = Backbone.Model({first: "Planet", last: "Earth"});

      # ViewModel
      var view_model = kb.viewModel(model);
      view_model.fullName = ko.computed(function() { return this.firstName() + " " + this.lastName(); });

      // Bind
      ko.applyBindings(view_model, $('#my_view')[0]);
      ...
      # Clean up
      kb.utils.release(view_model); view_model = null

    p
    h2='Inheritance'
    div='Some Knockback classes are meant to be inherited. Specifically:'
    ul
      li
        a(href="docs.html#view_model")="kb.ViewModel"
      li
        a(href="docs.html#localized_observable")="kb.LocalizedObservable"
      li
        a(href="docs.html#ref_countable")="kb.RefCountable"
    div='Re-wrtting the above kv.viewModel example:'
    pre(data-for='cs'): code.coffee.
      # View
      &lt;div id='my_view'&gt;&lt/div&gt;
        &lt;p&gt;First name: &lt;input data-bind="value: firstName" /&gt;&lt;/p&gt;
        &lt;p&gt;Last name: &lt;input data-bind="value: lastName" /&gt;&lt;/p&gt;
        &lt;h2&gt;Hello, &lt;span data-bind="text: fullName"&gt; &lt;/span&gt;!&lt;/h2&gt;
      &lt;div&gt;&lt/div&gt;

      # Model
      model = new Backbone.Model({first: "Planet", last: "Earth"})

      # ViewModel
      class ViewModel extends kb.ViewModel
        constructor: (model) ->
          super
          @fullName = ko.computed(->return "#&#123@firstName()} #&#123@lastName()}")
      view_model = new ViewModel(model)

      # Bind
      ko.applyBindings(view_model, $('#my_view')[0])
      ...
      # Clean up
      kb.utils.release(view_model); view_model = null

    pre(data-for='js'): code.javascript.
      // View
      &lt;div id='my_view'&gt;&lt/div&gt;
        &lt;p&gt;First name: &lt;input data-bind="value: firstName" /&gt;&lt;/p&gt;
        &lt;p&gt;Last name: &lt;input data-bind="value: lastName" /&gt;&lt;/p&gt;
        &lt;h2&gt;Hello, &lt;span data-bind="text: fullName"&gt; &lt;/span&gt;!&lt;/h2&gt;
      &lt;div&gt;&lt/div&gt;

      // Model
      var model = Backbone.Model({first: "Planet", last: "Earth"});

      // ViewModel
      var ViewModel = extends kb.ViewModel.extend({
        constructor: function(model){
          kb.ViewModel.prototype.constructor.apply(this, arguments);
          this.fullName = ko.computed(function() { return this.firstName() + " " + this.lastName(); });
        }
      });
      var view_model = new ViewModel(model);

      // Bind
      ko.applyBindings(view_model, $('#my_view')[0]);
      ...
      # Clean up
      kb.utils.release(view_model); view_model = null

    p
    h2='Classes vs Factory Functions'
    div='You may have noticed that there is both kb.viewModel(model, options) and kb.ViewModel. The reason is that to reduce the need of using `new` and to be more familiar with Knockout, there are factory methods that create the underlying classes.'
    p='For example:'
    pre(data-for='cs'): code.coffee.
      # factory function
      Knockback.viewModel = (model, options) -> return new Knockback.ViewModel(model, options)
    pre(data-for='js'): code.javascript.
      // factory function
      Knockback.viewModel = function(model, options) { return new Knockback.ViewModel(model, options); };
    div.alert.alert-error
      span="Be careful to differentiate the factory from the class when using "
      a(href='docs.htm#utils_observable_instance_of')="kb.utils.observableInstanceOf(observable, class)"

