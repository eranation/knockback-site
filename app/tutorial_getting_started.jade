extends _jade_includes/layout

block title
  title= "Knockback.js Tutorial: Todos"

block includes
  link(rel="stylesheet",href="stylesheets/tutorial.css")

block navbar
  include _jade_includes/layout_components/page_navbar
  mixin pageNavbar('Getting Started', true)

block content
  section
    h1="Tutorial: Getting Started with Knockback.js"
    div
      span='In essence, '
      a(href='index.html')='Knockback.js'
      span=' bridges the dynamic DOM bindings of '
      a(href='http://knockoutjs.com/')='Knockout.js'
      span=' with the models, collections, and routers of '
      a(href='http://documentcloud.github.com/backbone/')='Backbone.js'
      span='. Well, it also brings some other cool features like localization, default values, and nested view models.'

    p
    h2='Useful Resources'
    div='Before you start with Knockback.js, we recommend you first get acquainted with Backbone.js and Knockout.js by reviewing their websites (above) and this information:'
    p
      ul
        li
          a(href='http://documentcloud.github.com/backbone/docs/todos.html')='Documentation of Backbone.js Todos app'
          span=' (but skip the section on views)'
        li
          a(href='http://knockoutjs.com/examples/')='Live examples of Knockback.js'
        li
          a(href='http://channel9.msdn.com/Events/MIX/MIX11/FRM08')='Excellent video walking through Knockback.js'
    span='Also take a look at this '
    a(href='index.html#comparison_table')='comparison table'
    span=' between the libraries or this '
    a(href='http://www.geekdave.com/?p=79')='blog entry'

    p
    h2='Minimal Study'
    h3="Knockout.js"
    div
      span='Knockout follows the '
      a(href='http://en.wikipedia.org/wiki/Model_View_ViewModel')='Model_View_ViewModel (MVVM)'
      span=' design pattern meaning you specify a ViewModel (Controller) in addition to your data (Model) which encapsulates specific data and logic for your HTML/Template (View).'
    pre(data-for='cs'): code.coffee.
      # View
      &lt;p&gt;First name: &lt;input data-bind="value: first_name" /&gt;&lt;/p&gt;
      &lt;p&gt;Last name: &lt;input data-bind="value: last_name" /&gt;&lt;/p&gt;
      &lt;h2&gt;Hello, &lt;span data-bind="text: full_name"&gt; &lt;/span&gt;!&lt;/h2&gt;

      # Model
      model = {first_name: "Planet", last_name: "Earth"}

      # ViewModel
      ViewModel = (model) ->
        @first_name = ko.observable(model.first_name)
        @last_name = ko.observable(model.last_name)
        @full_name = ko.computed(=>return "\#{@first_name()} \#{@last_name()}")
        @
      view_model = new ViewModel(model)

      # Bind
      ko.applyBindings(view_model)

    pre(data-for='js'): code.javascript.
      // View
      &lt;p&gt;First name: &lt;input data-bind="value: first_name" /&gt;&lt;/p&gt;
      &lt;p&gt;Last name: &lt;input data-bind="value: last_name" /&gt;&lt;/p&gt;
      &lt;h2&gt;Hello, &lt;span data-bind="text: full_name"&gt; &lt;/span&gt;!&lt;/h2&gt;

      // Model
      var model = {first_name: "Planet", last_name: "Earth"};

      // ViewModel
      var ViewModel = function(model) {
        this.first_name = ko.observable(model.first_name);
        this.last_name = ko.observable(model.last_name);
        this.full_name = ko.computed(function() { return this.first_name() + " " + this.last_name(); }, this);
      };
      var view_model = new ViewModel(model);

      // Bind
      ko.applyBindings(view_model);

    strong="Note:"
    span=" ViewModels need to be unique instances so Knockout uses a simple function with new to create an instance. Here are some equivalents:"

    pre(data-for='cs'): code.coffee.
      # Form 1: Simple function-based class
      ViewModel = (model) ->
        @first_name = ko.observable(model.first_name)
        @ # note: need to return this/@ since CoffeeScript returns the last argument automatically (which is not what we want)

      view_model = new ViewModel({first_name: "Hello"})

      # Form 2: CoffeeScript class (allows for inheritance)
      class ViewModel
        constructor: (mode) ->
          @first_name = ko.observable(model.first_name)

      view_model = new ViewModel({first_name: "Hello"})

    pre(data-for='js'): code.javascript.
      # Simple function-based class
      var ViewModel = function(model) {
        this.first_name = ko.observable(model.first_name);
      };

      var view_model = new ViewModel({first_name: "Hello"});

    p
    h3="Backbone.js"
    div
      span='Backbone is an amazing '
      a(href='http://en.wikipedia.org/wiki/Model_view_controller')='Model_View_Controller (MVC)'
      span=' - '
      a(href='http://documentcloud.github.com/backbone/#FAQ-mvc')='inspired'
      span=' library that handles data (Model/Collection) synchronization with a RESTful server for '
      a(href='http://en.wikipedia.org/wiki/Object-relational_mapping ')='Object_Relational_Mapping (ORM)'
      span=', page routing, etc. Unfortunately, their Views becomecomplex to maintain when dynamic Model and View synchronization is required (which is why Knockback exists).'
    div='These are the basic Model components from Backbone used by Knockback:'
    pre(data-for='cs'): code.coffee.
      // Model
      earth = new Backbone.Model({first_name: 'Planet', last_name: 'Earth'})
      mars = new Backbone.Model({first_name: 'Planet', last_name: 'Mars'})

      // Collection
      planets = new Backbone.Collection([earth, mars])

    pre(data-for='js'): code.javascript.
      // Model
      var earth = new Backbone.Model({first_name: 'Planet', last_name: 'Earth'});
      var mars = new Backbone.Model({first_name: 'Planet', last_name: 'Mars'});

      // Collection
      var planets = new Backbone.Collection([earth, mars]);

    div='This is a Backbone router that can be used by your app:'
    pre(data-for='cs'): code.coffee.
      // Router
      class PageRouter extends Backbone.Router
        routes:
          "earth":    "switchToEarth"     // #earth
          "mars":     "switchToMars"      // #mars

        switchToEarth: -> # do something
        switchToMars: -> # do something

      # instantiate the router and start listening for URL changes
      page_router = new PageRouter()
      Backbone.history.start()

    pre(data-for='js'): code.javascript.
      var PageRouter = Backbone.Router.extend({
        routes: {
          "earth":    "switchToEarth",     // #earth
          "mars":     "switchToMars"      // #mars
        },

        switchToEarth: function() { /* do something */ },
        switchToMars: function() { /* do something */ }
      });

      // instantiate the router and start listening for URL changes
      var page_router = new PageRouter()
      Backbone.history.start()

    p
    h3="Knockback.js"
    p='You can use Knockback to bind Backbone Models/Collections to your HTML/templates (View) using Knockout. This allows server or application changes to Models/Collections to be propagated automatically to your views using `Backbone.sync`'
    h4="Using with a Backbone.Model"
    p='Creating a ko.observable() for each model attribute by hand:'
    pre(data-for='cs'): code.coffee.
      # View
      &lt;p&gt;First name: &lt;input data-bind="value: first_name" /&gt;&lt;/p&gt;
      &lt;p&gt;Last name: &lt;input data-bind="value: last_name" /&gt;&lt;/p&gt;
      &lt;h2&gt;Hello, &lt;span data-bind="text: full_name"&gt; &lt;/span&gt;!&lt;/h2&gt;

      # Model
      model = new Backbone.Model({first_name: "Planet", last_name: "Earth"})

      # ViewModel
      ViewModel = (model) ->
        @first_name = kb.observable(model, 'first_name')
        @last_name = kb.observable(model, 'first_name')
        @full_name = ko.computed(=>return "\#{@first_name()} \#{@last_name()}")
        @
      view_model = new ViewModel(model)

      # Bind
      ko.applyBindings(view_model)

      # Do something then clean up
      # kb.utils.release(view_model); view_model = null

    pre(data-for='js'): code.javascript.
      // View
      &lt;p&gt;First name: &lt;input data-bind="value: first_name" /&gt;&lt;/p&gt;
      &lt;p&gt;Last name: &lt;input data-bind="value: last_name" /&gt;&lt;/p&gt;
      &lt;h2&gt;Hello, &lt;span data-bind="text: full_name"&gt; &lt;/span&gt;!&lt;/h2&gt;

      // Model
      var model = new Backbone.Model({first_name: "Planet", last_name: "Earth"});

      // ViewModel
      var ViewModel = function(model) {
        this.first_name = kb.observable(model, 'first_name');
        this.last_name = kb.observable(model, 'last_name');
        this.full_name = ko.computed(function() { return this.first_name() + " " + this.last_name(); }, this);
      };
      var view_model = new ViewModel(model);

      // Bind
      ko.applyBindings(view_model);

      // Do something then clean up
      // kb.utils.release(view_model); view_model = null;

    p#view_model_no_inheritance='Creating a ko.observable() automatically for each model attribute:'
    pre(data-for='cs'): code.coffee.
      # View
      &lt;p&gt;First name: &lt;input data-bind="value: first_name" /&gt;&lt;/p&gt;
      &lt;p&gt;Last name: &lt;input data-bind="value: last_name" /&gt;&lt;/p&gt;
      &lt;h2&gt;Hello, &lt;span data-bind="text: full_name"&gt; &lt;/span&gt;!&lt;/h2&gt;

      # Model
      model = new Backbone.Model({first_name: "Planet", last_name: "Earth"})

      # ViewModel
      view_model = kb.viewModel(model)
      view_model.full_name = ko.computed(->return "\#{@first_name()} \#{@last_name()}", view_model)

      # Bind
      ko.applyBindings(view_model)

      # Do something then clean up
      # kb.utils.release(view_model); view_model = null

    pre(data-for='js'): code.javascript.
      // View
      &lt;p&gt;First name: &lt;input data-bind="value: first_name" /&gt;&lt;/p&gt;
      &lt;p&gt;Last name: &lt;input data-bind="value: last_name" /&gt;&lt;/p&gt;
      &lt;h2&gt;Hello, &lt;span&gt; data-bind="text: full_name"&gt; &lt;/span&gt;!&lt;/h2&gt;

      // Model
      var model = new Backbone.Model({first_name: "Planet", last_name: "Earth"});

      // ViewModel
      var view_model = kb.viewModel(model);
      view_model.full_name = ko.computed(function() { return this.first_name() + " " + this.last_name(); }, view_model);

      // Bind
      ko.applyBindings(view_model);

      // Do something then clean up
      // kb.utils.release(view_model); view_model = null;

    h4="Using with a Backbone.Collection"
    p='Create a kb.ViewModel automatically for each model in a collection:'
    pre(data-for='cs'): code.coffee.
      # View
      &lt;!-- ko foreach: planets --&gt;
        &lt;p&gt;First name: &lt;input data-bind="value: first_name" /&gt;&lt;/p&gt;
        &lt;p&gt;Last name: &lt;input data-bind="value: last_name" /&gt;&lt;/p&gt;
        &lt;h2&gt;Hello, &lt;span data-bind="text: ko.computed(function(){ return $data.first_name() + ' ' + $data.last_name(); })"&gt; &lt;/span&gt;!&lt;/h2&gt;
      &lt;!-- /ko --&gt;

      # Models
      earth = new Backbone.Model({first_name: 'Planet', last_name: 'Earth'})
      mars = new Backbone.Model({first_name: 'Planet', last_name: 'Mars'})

      # Collection
      planets = new Backbone.Collection([earth, mars])

      # ViewModel
      view_model =
        planets: kb.collectionObservable(planets, {view_model: kb.ViewModel})

      # Bind
      ko.applyBindings(view_model)

      # Do something then clean up
      # kb.utils.release(view_model); view_model = null

    pre(data-for='js'): code.javascript.
      // View
      &lt;!-- ko foreach: planets --&gt;
        &lt;p&gt;First name: &lt;input data-bind="value: first_name" /&gt;&lt;/p&gt;
        &lt;p&gt;Last name: &lt;input data-bind="value: last_name" /&gt;&lt;/p&gt;
        &lt;h2&gt;Hello, &lt;span data-bind="text: ko.computed(function(){ return $data.first_name() + ' ' + $data.last_name(); })"&gt; &lt;/span&gt;!&lt;/h2&gt;
      &lt;!-- /ko --&gt;

      // Models
      var earth = new Backbone.Model({first_name: 'Planet', last_name: 'Earth'});
      var mars = new Backbone.Model({first_name: 'Planet', last_name: 'Mars'});

      // Collection
      var planets = new Backbone.Collection([earth, mars]);

      // ViewModel
      var view_model = {
        planets: kb.collectionObservable(planets, {view_model: kb.ViewModel})
      };

      // Bind
      ko.applyBindings(view_model);

      // Do something then clean up
      // kb.utils.release(view_model); view_model = null;


    p
    h2='Inheritance'
    div='Some Knockback classes are meant to be inherited. Specifically:'
    ul
      li
        a(href="docs.html#view_model")="kb.ViewModel"
      li
        a(href="docs.html#localized_observable")="kb.LocalizedObservable"
      li
        a(href="docs.html#ref_countable")="kb.RefCountable"
    span='Re-wrtting the '
    a(href='#view_model_no_inheritance')='above kb.viewModel example'
    span=':'
    pre(data-for='cs'): code.coffee.
      # View
      &lt;p&gt;First name: &lt;input data-bind="value: first_name" /&gt;&lt;/p&gt;
      &lt;p&gt;Last name: &lt;input data-bind="value: last_name" /&gt;&lt;/p&gt;
      &lt;h2&gt;Hello, &lt;span data-bind="text: full_name"&gt; &lt;/span&gt;!&lt;/h2&gt;

      # Model
      model = new Backbone.Model({first_name: "Planet", last_name: "Earth"})

      # ViewModel
      class ViewModel extends kb.ViewModel
        constructor: (model) ->
          super
          @full_name = ko.computed(=>return "\#{@first_name()} \#{@last_name()}")
      view_model = new ViewModel(model)

      # Bind
      ko.applyBindings(view_model)

      # Do something then clean up
      # kb.utils.release(view_model); view_model = null

    pre(data-for='js'): code.javascript.
      // View
      &lt;p&gt;First name: &lt;input data-bind="value: first_name" /&gt;&lt;/p&gt;
      &lt;p&gt;Last name: &lt;input data-bind="value: last_name" /&gt;&lt;/p&gt;
      &lt;h2&gt;Hello, &lt;span data-bind="text: full_name"&gt; &lt;/span&gt;!&lt;/h2&gt;

      // Model
      var model = new Backbone.Model({first_name: "Planet", last_name: "Earth"});

      // ViewModel
      var ViewModel = kb.ViewModel.extend({
        constructor: function(model){
          kb.ViewModel.prototype.constructor.apply(this, arguments);
          this.full_name = ko.computed(function() { return this.first_name() + " " + this.last_name(); }, this);
        }
      });
      var view_model = new ViewModel(model);

      // Bind
      ko.applyBindings(view_model);

      // Do something then clean up
      // kb.utils.release(view_model); view_model = null

    p
    h2='Classes vs Factory Functions'
    div='You may have noticed that there is both kb.viewModel(model, options) and kb.ViewModel. The reason is that to reduce the need of using `new` and to be more familiar with Knockout, there are factory methods that create the underlying classes.'
    p='For example:'
    pre(data-for='cs'): code.coffee.
      # factory function
      Knockback.viewModel = (model, options) -> return new Knockback.ViewModel(model, options)
    pre(data-for='js'): code.javascript.
      // factory function
      Knockback.viewModel = function(model, options) { return new Knockback.ViewModel(model, options); };
    div.alert.alert-error
      span="Be careful to differentiate the factory from the class when using "
      a(href='docs.htm#utils_observable_instance_of')="kb.utils.observableInstanceOf(observable, class)"


    h2='Note on Relationships between Models and ViewModels - Often One-To-Many'

    p='The distinction between Models and ViewModels is important:'
    p
      ul
        li
          span='Backbone.Models encapsulate the data and operations on the data, are serialized/deserialized from/to the server, and are in short Models.'
        li
          span='ViewModels provide the attributes and logic to the templates often interacting with the Model data like Controllers. However, they may have their own data and logic that is purely View-related and that the server should never know about.'

    p='Besides providing a clean separation between data and display, this separation becomes important in a larger application. In a larger application, you often have different ways to present the same Model with different ViewModels. For example, a Model could have the following ViewModels:'

    p
      ul
        li
          strong="Thumbnail View:"
          span=" the ViewModel could only expose a subset of the Model's attributes, dates/time may be in the shortest format possible, or maybe just an image would be provided to the template."
        li
          strong='Cell View:'
          span=' the ViewModel could again expose a subset of only the most relevant summary attributes, routing information to a detailed summary view, etc.'
        li
          strong='Editing View:'
          span=" the ViewModel could expose almost all of the Model's attributes, localized labels for each, data and functions for the editing controls and functionality, routing information to specialized editing views, etc."

    p='Important to understand that in a larger application the relationship between Models and ViewModels tends to be one-to-many. In this application, there is a one-to-many relationship from the Priority model through the the HeaderViewModel and TodoViewModel ViewModels because each one uses the Priority for rendering their priority colors and providing priority settings data to their tooltip, but the actions on selecting a priority in the tool tip differ.'