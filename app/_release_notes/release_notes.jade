extends ../_layout/_layout_template

include ../_layout/_layout_mixins

block title
  title Knockback.js Release Notes

block includes
  link(rel='stylesheet', href='stylesheets/release_notes.css')

block navbar
  mixin pageNavbar('Release Notes', true)

block content
  section#0_15_0
    h1 Upgrading to >= 0.15.0 from a previous version

    h2 New Stuff
    p
    ol
      li kb.ViewModel now handles nested models (like self-referencing Backbone-Relational.js models)
        p
        pre(data-for='cs').
          class Person extends Backbone.RelationalModel
            relations: [{
              type: Backbone.HasMany
              key: 'friends'
              relatedModel: Person
            }]

          john = new Person({
            id: 'person-1'
            name: 'John'
            friends: ['person-2']
          })
          paul = new Person({
            id: 'person-2'
            name: 'Paul'
            friends: ['person-1']
          })

          john_view_model = kb.viewModel(john)

          friend_view_model = john_view_model.friends()[0]
          kb.utils.wrappedModel(friend_view_model)                      # paul
          kb.utils.wrappedModel(friend_view_model.friends()[0])         # john

          ...
          kb.utils.release(john_view_model); john_view_model = null     # release when done
        pre(data-for='js').
          var Person = Backbone.RelationalModel.extend({
            relations: [{
              type: Backbone.HasMany,
              key: 'friends',
              relatedModel: Person
            }]
          });

          var john = new Person({
            id: 'person-1',
            name: 'John',
            friends: ['person-2']
          });
          var paul = new Person({
            id: 'person-2',
            name: 'Paul',
            friends: ['person-1']
          });

          var john_view_model = kb.viewModel(john);

          var friend_view_model = john_view_model.friends()[0];
          kb.utils.wrappedModel(friend_view_model);                     // paul
          kb.utils.wrappedModel(friend_view_model.friends()[0]);        // john

          ...
          kb.utils.release(john_view_model); john_view_model = null;    // release when done
          });
        h3 Related Tutorials:
        ul
          li
            a(href='tutorial_relational_models.html') Relational Models
          li
            a(href='tutorial_kb_view_model.html') kb.ViewModel
        p

      li kb.CollectionObservable is now a ko.observableArray so you no longer need to supply the second parameter
        p
        pre(data-for='cs').
          # WAS:
          view_model =
            property: ko.observableArray()
            collection_observable: kb.collectionObservable(collection, observable_array, options)

          for model_view_model in view_model.property()
            ...

          # IS NOW:
          view_model =
            property: kb.collectionObservable(collection, options)

          for model_view_model in view_model.property()
            ...
        pre(data-for='js').
          // WAS:
          var view_model = {
            property: ko.observableArray()
            collection_observable: kb.collectionObservable(collection, observable_array, options)
          };

          var view_model;
          for (var i = 0, len = view_model.property().length; i < len; i++) {
            view_model = view_model.property()[i];
            ...
          }

          // IS NOW:
          var view_model = {
            property: kb.collectionObservable(collection, options)
          };

          var view_model;
          for (var i = 0, len = view_model.property().length; i < len; i++) {
            view_model = view_model.property()[i];
            ...
          }

    h2 Required Changes
    ol
      li kb.collectionObservable is now a ko.observableArray so you no longer need to supply the second parameter

        div.alert.alert-info
          p This means:
          ul
            li kb.collectionObservables will hold Models if a view_model-create option is not passed to the constructor (you can call hasViewModels() to check)
            li kb.collectionObservables::eachViewModel(callback) has been deprecated since you have direct access to the array of models or view models

        div.alert.alert-error
          p Required Changes:
          ul
            li Update custom sort functions to use kb.utils.wrappedModel(model)
              pre(data-for='cs').
                collection_observable = kb.collectionObservable(new Backbone.Collection([{name: 'name2'}, {name: 'name1'}]), {
                  view_model:     kb.ViewModel
                  sorted_index:   (models, model) -> return _.sortedIndex(models, model, (test) -> return kb.utils.wrappedModel(test).get('name') )
                })
              pre(data-for='js').
                collection_observable = kb.collectionObservable(new Backbone.Collection([{name: 'name2'}, {name: 'name1'}]), {
                  view_model: kb.ViewModel,
                  sorted_index: function(models, model) {
                    return _.sortedIndex(models, model, function(test) {
                      return kb.utils.wrappedModel(test).get('name');
                    });
                  }
                });
            li Replace calls to kb.CollectionObservable::eachViewModel(callback) with direct iterations on the collection itself
              pre(data-for='cs').
                for view_model in collection_observable()
                  # do something
              )
              pre(data-for='js').
                var view_model;
                for (var i = 0, len = collection_observable().length; i < len; i++) {
                  view_model = collection_observable()[i];
                  // do something
                }

      li kb.collectionObservable no longer triggers changes when model attributes change (only when the list of models is modified)
        div.alert.alert-error
          p Required Changes:
          ul
            li If you require triggering on model attribute changes, register with the collection and trigger them manually
              pre(data-for='cs').
                collection.bind('change', -> collection_observable.valueHasMutated())
              pre(data-for='js').
                collection.bind('change', function(){ collection_observable.valueHasMutated(); });

      li Utility functions have been moved to kb.utils to be more consistent with Knockout
        p You can find all of the utility functions
          a(href='docs_kb_utils.html')  here

        div.alert.alert-error
          p Here is a list of the deprecated functions:
          ul
            li Knockback.wrappedObservable(instance)
              ul was replaced by kb.utils.wrappedObservable(instance {, observable})
            li Knockback.viewModelGetModel(view_model) and Knockback.vmModel(view_model)
              ul were replaced by kb.utils.wrappedObservable(view_model {, observable})
            li Knockback.vmRelease(view_model)
              ul was replaced by kb.utils.release(obj)
            li Knockback.vmReleaseObservable(observable)
              ul was replaced by kb.utils.release(obj)

      li kb.LocalizedObservable now uses Backbone.extend for javascript inheritance so read/write options have been deprecated
        div.alert.alert-error
          p Required Changes:
          ul
            li Use Coffeescript class extends or JavaScript extend() for kb.LocalizedObservable
              pre(data-for='cs').
                class MyLocalizer extends kb.LocalizedObservable
                  constructor: (value, options, view_model) ->
                    super; return kb.utils.wrappedObservable(this)
                  read: (value) ->
                    # return something
                  write: (localized_string, value) ->
                    # do something
              pre(data-for='js').
                MyLocalizer = kb.LocalizedObservable.extend({
                  constructor: function(value, options, view_model) {
                    kb.LocalizedObservable.prototype.constructor.apply(this, arguments);
                    return kb.utils.wrappedObservable(this);
                  },
                  read: function(value) {
                    # return something
                  },
                  write: function(localized_string, value) {
                    # do something
                  }
                });

