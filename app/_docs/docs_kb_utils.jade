extends ../_layout/_layout_template

include ../_layout/_layout_mixins
include ../_docs/_docs_mixins

block title
  title Knockback.js Docs

block includes
  link(rel='stylesheet', href='stylesheets/docs.css')

block navbar
  mixin pageNavbar('Docs', true)

block api_descriptions

  //////////////////////////////////
  // kb.utils
  //////////////////////////////////
  h2 kb.utils
  div Library for general-purpose utilities

  h3#release Knockback.utils.release(obj, [keys_only])
  div Releases any type of view model or observable using the conventions of release(), destroy(), dispose()
  pre(data-for='cs').
    view_model = kb.viewModel(model)
    kb.utils.release(view_model); view_model = null

    todos = kb.collectionObservable(collection)
    kb.utils.release(todos); todos = null

  pre(data-for='js').
    var view_model = kb.viewModel(model);
    kb.utils.release(view_model); view_model = null;

    var todos = kb.collectionObservable(collection);
    kb.utils.release(todos); todos = null;

  h3#model Knockback.utils.wrappedModel(view_model {, model}) <span class='label label-important'>dual purpose</span>
  div Used to get/set a Model on a ViewModel. During a get, if the ViewModel has no Model, it returns the ViewModel itself (mainly to simplify collection sorting)
  h4 Parameters
    ol
      li
        strong view_model
        span.type { object | kb.ViewModel }:
        span  the ViewModel that owns the Model
      li
        strong model:
        span.type { object | kb.ViewModel }: <span class='label label-inverse'>optional</span>
        span  the Model to set
  pre(data-for='cs').
    view_model = kb.viewModel(model)

    same_model = kb.utils.wrappedModel(view_model)

  pre(data-for='js').
    var view_model = kb.viewModel(model);

    var same_model = kb.utils.wrappedModel(view_model);

  h3#set_to_default Knockback.utils.setToDefault(obj)
  div Used to return all of the nested observables to their default values (if they exist)
  h4 Parameters
    ol
      li
        strong obj
        span.type { object | Knockback observable with setToDefault() }:
        span  the target for reset
  pre(data-for='cs').
    model = new Backbone.Model({name: 'Bob'})
    view_model =
      wrapped_name: kb.defaultWrapper(kb.observable(model, 'name'), "(no name)')
    # view_model.wrapped name: Bob

    kb.utils.setToDefault(view_model)
    # view_model.wrapped name: (no name)

  pre(data-for='js').
    var model = new Backbone.Model({name: 'Bob'});
    var view_model = {
      wrapped_name: kb.defaultWrapper(kb.observable(model, 'name'), "(no name)')
    };
    // view_model.wrapped name: Bob

    kb.utils.setToDefault(view_model);
    // view_model.wrapped name: (no name)

  h3#observable_instance_of kb.utils.observableInstanceOf(observable, class)
  div Checks the class type of the underlying class on a Knockback observable
  p
    strong Please note:
    span classes start with a capital letter (eg. kb.CollectionObservable) whereas factory methods start with a lower case letter (eg. kb.collectionObservable)
  pre(data-for='cs').
    todos = new kb.CollectionObservable(new Backbone.Collection([{name: 'name1'}, {name: 'name2'}]))

    kb.utils.observableInstanceOf(todos, kb.CollectionObservable) # true
    kb.utils.observableInstanceOf(todos, kb.collectionObservable) # false (factory function not class!)

  pre(data-for='js').
    var todos = new kb.CollectionObservable(new Backbone.Collection([{name: 'name1'}, {name: 'name2'}]))'

    kb.utils.observableInstanceOf(todos, kb.CollectionObservable); // true
    kb.utils.observableInstanceOf(todos, kb.collectionObservable); // false (factory function not class!)

  h3#wrapped_observable wrappedObservable(instance {, observable})
  div Used to get/set a observable an owning instance. Mainly used as a helper so you can return a ko.observable function instead of an instance when creating a new Knockback or Knockback-derived instance.
  h4 Parameters
    ol
      li
        strong instance
        span.type { any Knockout observable being used by Knockback }:
      li
        strong observable:
        span.type { a Knockback or Knockout-derived class }: <span class='label label-inverse'>optional</span>
  pre(data-for='cs').
    class ShortDateLocalizer extends kb.LocalizedObservable
      constructor: (value, options, view_model) ->
        super; return kb.utils.wrappedObservable(this)

  pre(data-for='js').
    var ShortDateLocalizer = kb.LocalizedObservable.extend({
      constructor: function(value, options, view_model) {
        kb.LocalizedObservable.prototype.constructor.apply(this, arguments);
        return kb.utils.wrappedObservable(this);
      }
    });

  //h3#options_create_clear optionsCreateClear(options)
  //div TODO
  //pre(data-for='cs').
  //  TODO
  //pre(data-for='js').
  //  TODO

  //h3#options_create_override optionsCreateOverride(options, create_options)
  //div TODO
  //pre(data-for='cs').
  //  TODO
  //pre(data-for='js').
  //  TODO

block content
  div.api.container
    h1 Knockback.js API and Usage Examples
    div.container-fluid
      div.row-fluid
        div.span3.api.index
          mixin docsIndex('kb.utils', [{release: 'release'}, { model: 'wrappedModel'}, {set_to_default: 'setToDefault'}, {observable_instance_of: 'observableInstanceOf'}, {wrapped_observable: 'wrappedObservable'} /*, {options_create_clear: 'optionsCreateClear'}, {options_create_override: 'optionsCreateOverride'}*/])
        div.span9.api.descriptions
          div.content
            div.wrapper
              block api_descriptions
