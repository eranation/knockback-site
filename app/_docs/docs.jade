extends ../_layout/_layout_template

include ../_layout/_layout_mixins
include ../_docs/_docs_mixins

block title
  title= "Knockback.js Docs"

block includes
  link(rel="stylesheet",href="stylesheets/docs.css")

block navbar
  mixin pageNavbar('Docs', true)

block docs_overview
  div.content
    h2='Welcome to Knockback.js!'
    p='Please browser the API reference on the left to learn more about the API.'
    p='Also check out the Tutorials (on the top nav bar) to learn how to solve some common use cases or to learn something new!'

    h3='API Coding Conventions'
    p='Knockback uses the following conventions: ClassName, functionName, property_name, \'constant string\', "dynamic string", CONSTANT_NAME'

    h3='API Indicators'
    ul
      li
        span.label.label-success='class'
        span=': indicates a class function that needs to be called in the form kb.ClassName.functionName()'

      p
      li
        span.label.label-inverse='optional'
        span=': indicates that function parameters or options can be left out'

      p
      li
        span.label.label-info='factory'
        span=': indicates a factory function is being described. Please note that many of the Knockout classes have corresponding factory functions to reduce verbosity and to improve consistency with Knockout.js'
        p
          span='For example, this: '
          pre ko.observable(model, 'name')
          span='is equivalent to: '
          pre new ko.Observable(model, 'name')
        p
          span="Be careful to use the class if you call the "
          a(href='docs_kb_utils.html#observable_instance_of')='kb.utils.observableInstanceOf'
          span=" utility function "
          span.label.label-important='warning'

      p
      li
        span.label.label-important='dual purpose'
        span=': indicates that a function is both a getter and a setter.'
        p="For example, this one gets the model: 'view_model.model()' whereas this one sets the model: 'view_model.model(model)'"

    h3='Other Things Worth Knowing'
    ol
      li
        strong="Knockout Observables Foundations: "
        span="All Knockback.js classes return Knockout.js observables so their dependencies can and should be managed like any Knockout observable."
      p
      li
        strong="Namespace Aliasing: "
        span="'kb' and 'Knockback' can be used interchangeably"
      p
      li
        span#backbone_model_signature
          strong="Backbone.Model Signatures: "
          span="Knockback.js does not require Backbone.Models for attribute watching, but requires Backbone.Model-like implementations that conform to the following signatures:"
        ul
          li="Backbone.Events: 'bind(event, callback)', 'unbind(event, callback)', and 'trigger(event, params...)'"
          li="Backbone.Model: 'get(attribute_name)'"
        span=" and triggers 'change' and/or \"change:#{attribute_name}\" events when the Backbone.Models-like instance's attributes change."
        p
          span="This fact is used when implementing a "
          a(href='tutorial_locale_manager.html')='Custom Locale Manager'
          span=" and could be used to port another library like Spine.js to Knockback.js."

    h3='Note on Relationships between Models and ViewModels - Often One-To-Many'

    p='The distinction between Models and ViewModels is important:'
    p
      ul
        li
          span='Backbone.Models encapsulate the data and operations on the data, are serialized/deserialized from/to the server, and are in short Models.'
        li
          span='ViewModels provide the attributes and logic to the templates often interacting with the Model data like Controllers. However, they may have their own data and logic that is purely View-related and that the server should never know about.'

    p='Besides providing a clean separation between data and display, this separation becomes important in a larger application. In a larger application, you often have different ways to present the same Model with different ViewModels. For example, a Model could have the following ViewModels:'

    p
      ul
        li
          strong="Thumbnail View:"
          span=" the ViewModel could only expose a subset of the Model's attributes, dates/time may be in the shortest format possible, or maybe just an image would be provided to the template."
        li
          strong='Cell View:'
          span=' the ViewModel could again expose a subset of only the most relevant summary attributes, routing information to a detailed summary view, etc.'
        li
          strong='Editing View:'
          span=" the ViewModel could expose almost all of the Model's attributes, localized labels for each, data and functions for the editing controls and functionality, routing information to specialized editing views, etc."

    p='Important to understand that in a larger application the relationship between Models and ViewModels tends to be one-to-many. In this application, there is a one-to-many relationship from the Priority model through the the HeaderViewModel and TodoViewModel ViewModels because each one uses the Priority for rendering their priority colors and providing priority settings data to their tooltip, but the actions on selecting a priority in the tool tip differ.'
block content
  div.api.container
    h1="Knockback.js API and Usage Examples"
    div.container-fluid
      div.row-fluid
        div.span3.api.index
          mixin docsIndex()
        div.span9.api.descriptions
          block docs_overview
