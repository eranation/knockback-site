extends _jade_includes/layout

block title
  title= "Knockback.js Release Notes"

block includes
  link(rel="stylesheet",href="stylesheets/release_notes.css")

block navbar
  include _jade_includes/layout_components/page_navbar
  mixin pageNavbar('Release Notes')
  include _jade_includes/layout_components/radio_coffee_or_java

block content
  section
    h1="Upgrading to 0.15.0"

    h2="Changes"

      ol
        li="kb.collectionObservable is now a ko.observableArray so you no longer need to supply the second parameter"
          p="Was:"
          pre(data-for="cs"): code.coffee.
            view_model =
              property: ko.observableArray()
              collection_observable: kb.collectionObservable(collection, observable_array, options)
          pre(data-for="js"): code.javascript.
            var view_model = {
              property: ko.observableArray()
              collection_observable: kb.collectionObservable(collection, observable_array, options)
            };

          p="Is Now:"
          pre(data-for="cs"): code.coffee.
            view_model =
              property: kb.collectionObservable(collection, options)
          pre(data-for="js"): code.javascript.
            var view_model = {
              property: kb.collectionObservable(collection, options)
            };

          div.alert.alert-info
            p="This means:"
            ul
              li="kb.collectionObservables will hold Models if a view_model-create option is not passed to the constructor (you can call hasViewModels() to check)"
              li="kb.collectionObservables::eachViewModel(callback) has been deprecated since you have direct access to the array of models or view models"

          div.alert.alert-error
            p="Required Changes:"
            ul
              li="Update custom sort functions to use kb.utils.wrappedModel(model)"
                pre(data-for="cs"): code.coffee.
                  collection_observable = kb.collectionObservable(new Backbone.Collection([{name: 'name2'}, {name: 'name1'}]), {
                    view_model:     kb.ViewModel
                    sorted_index:   (models, model) -> return _.sortedIndex(models, model, (test) -> return kb.utils.wrappedModel(test).get('name') )
                  })
                pre(data-for="js"): code.javascript.
                  collection_observable = kb.collectionObservable(new Backbone.Collection([{name: 'name2'}, {name: 'name1'}]), {
                    view_model: kb.ViewModel,
                    sorted_index: function(models, model) {
                      return _.sortedIndex(models, model, function(test) {
                        return kb.utils.wrappedModel(test).get('name');
                      });
                    }
                  });
              li="Replace calls to kb.CollectionObservable::eachViewModel(callback) with direct iterations on the collection itself"
                pre(data-for="cs"): code.coffee.
                  for view_model in collection_observable()
                    # do something
                )
                pre(data-for="js"): code.javascript.
                  var view_model, array = collection_observable();
                  for (var i = 0, len = array.length; i < len; i++) {
                    view_model = array[i];
                    // do something
                  }

        li="kb.collectionObservable no longer triggers changes when model attributes change (only when the list of models is modified)"
          div.alert.alert-error
            p="Required Changes:"
            ul
              li="If you require triggering on model attribute changes, register with the collection and trigger them manually"
                pre(data-for="cs"): code.coffee.
                  collection.bind('change', -> collection_observable.valueHasMutated())
                pre(data-for="js"): code.javascript.
                  collection.bind('change', function(){ collection_observable.valueHasMutated(); });

        li="Utility functions have been moved to kb.utils to be more consistent with Knockout"
          p="You can find all of the utility functions"
            a(href='docs.html#utils')=" here"

          div.alert.alert-error
            p="Here is a list of the deprecated functions:"
            ul
              li="Knockback.wrappedObservable(instance) was replaced by kb.utils.wrappedObservable(instance {, observable})"
              li="Knockback.viewModelGetModel(view_model) and Knockback.vmModel(view_model) was replaced by kb.utils.wrappedObservable(view_model {, observable})"
              li="Knockback.vmRelease(view_model) was replaced by kb.utils.release(obj)"
              li="Knockback.vmReleaseObservable(observable) was replaced by kb.utils.release(obj)"


        li="kb.LocalizedObservable now uses Backbone.extend for javascript inheritance so read/write options have been deprecated"
          div.alert.alert-error
            p="Required Changes:"
            ul
              li="Use Coffeescript class extends or JavaScript extend() for kb.LocalizedObservable"
                pre(data-for="cs"): code.coffee.
                  class MyLocalizer extends kb.LocalizedObservable
                    constructor: (value, options, view_model) ->
                      super; return kb.utils.wrappedObservable(this)
                    read: (value) ->
                      # return something
                    write: (localized_string, value) ->
                      # do something
                pre(data-for="js"): code.javascript.
                  MyLocalizer = kb.LocalizedObservable.extend({
                    constructor: function(value, options, view_model) {
                      kb.LocalizedObservable.prototype.constructor.apply(this, arguments);
                      return kb.utils.wrappedObservable(this);
                    },
                    read: function(value) {
                      # return something
                    },
                    write: function(localized_string, value) {
                      # do something
                    }
                  });

    h2="I hope you enjoy these modifications!"

