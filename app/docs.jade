extends _jade_includes/_layout

block title
  title= "Knockback.js Docs"

block includes
  link(rel="stylesheet",href="stylesheets/docs.css")

block navbar
  include _jade_includes/layout_components/_page_navbar
  mixin pageNavbar('Docs', true)

block api_index
  div.content
    ul

      //////////////////////////////////
      // kb.ViewModel
      //////////////////////////////////
      li.type
        a(href='#view_model') kb.ViewModel
        li='- '
          a(href='#view_model_extend') extend
        li='- '
          a(href='#view_model_create') constructor or kb.viewModel
        li='- '
          a(href='#view_model_model') model

      //////////////////////////////////
      // kb.Observable
      //////////////////////////////////
      li.type
        a(href='#observable') kb.Observable
        li='- '
          a(href='#observable_create') constructor or kb.observable
        li='- '
          a(href='#observable_destroy') destroy
        li='- '
          a(href='#observable_set_to_default') setToDefault

      //////////////////////////////////
      // kb.Observables
      //////////////////////////////////
      li.type
        a(href='#observables') kb.Observables
        li='- '
          a(href='#observables_create') constructor or kb.observables
        li='- '
          a(href='#observable_destroy') destroy
        li='- '
          a(href='#observable_set_to_default') setToDefault

      //////////////////////////////////
      // kb.CollectionObservable
      //////////////////////////////////
      li.type
        a(href='#collection_observable') kb.CollectionObservable
        li='- '
          a(href='#collection_observable_create') constructor or kb.collectionObservable
        li='- '
          a(href='#collection_observable_collection') collection
        li='- '
          a(href='#collection_observable_sorted_index') sortedIndex
        li='- '
          a(href='#collection_observable_sort_attribute') sortAttribute
        li='- '
          a(href='#collection_observable_has_view_models') hasViewModels

      //////////////////////////////////
      // kb.utils
      //////////////////////////////////
      li.type
        a(href='#utils') kb.utils
        li='- '
          a(href='#utils_release') release
        li='- '
          a(href='#utils_wrapped_model') wrappedModel
        li='- '
          a(href='#utils_set_to_default') setToDefault
        li='- '
          a(href='#utils_observable_instance_of') observableInstanceOf
        li='- '
          a(href='#utils_wrapped_observable') wrappedObservable
        //li='- '
        //  a(href='#utils_options_create_clear') optionsCreateClear
        //li='- '
        //  a(href='#utils_options_create_override') optionsCreateOverride

      //////////////////////////////////
      // kb.LocalizedObservable
      //////////////////////////////////
      li.type
        a(href='#localized_observable') kb.LocalizedObservable
        li='- '
          a(href='#localized_observable_extend') extend
        li='- '
          a(href='#localized_observable_constructor') constructor
        li='- '
          a(href='#localized_observable_destroy') destroy
        li='- '
          a(href='#localized_observable_set_to_default') setToDefault
        li='- '
          a(href='#localized_observable_reset_to_current') resetToCurrent
        li='- '
          a(href='#localized_observable_observed_value') observedValue

      //////////////////////////////////
      // kb.FormattedObservable
      //////////////////////////////////
      li.type
        a(href='#formatted_observable') kb.FormattedObservable
        li='- '
          a(href='#formatted_observable_create') constructor or kb.formattedObservable
        li='- '
          a(href='#formatted_observable_destroy') destroy

      //////////////////////////////////
      // kb.DefaultWrapper
      //////////////////////////////////
      li.type
        a(href='#default_wrapper') kb.DefaultWrapper
        li='- '
          a(href='#default_wrapper_create') constructor or kb.defaultWrapper
        li='- '
          a(href='#default_wrapper_destroy') destroy

      //////////////////////////////////
      // kb.TriggeredObservable
      //////////////////////////////////
      li.type
        a(href='#triggered_observable') kb.TriggeredObservable
        li='- '
          a(href='#triggered_observable_create') constructor or kb.triggeredObservable
        li='- '
          a(href='#triggered_observable_destroy') destroy

      //////////////////////////////////
      // kb.RefCountable
      //////////////////////////////////
      li.type
        a(href='#ref_countable') kb.RefCountable
        li='- '
          a(href='#ref_countable_extend') extend
        li='- '
          a(href='#ref_countable_constructor') constructor
        li='- '
          a(href='#ref_countable_retain') retain
        li='- '
          a(href='#ref_countable_ref_count') refCount
        li='- '
          a(href='#ref_countable_release') release
        li='- '
          a(href='#ref_countable___destroy') __destroy

      //////////////////////////////////
      // kb.Store
      //////////////////////////////////
      //li.type
      //  a(href='#store') kb.Store
      //  li='- '
      //    a(href='#store_constructor') constructor
      //  li='- '
      //    a(href='#store_destroy') destroy
      //  li='- '
      //    a(href='#store_register_value') registerValue
      //  li='- '
      //    a(href='#store_resolve_value') resolveValue
      //  li='- '
      //    a(href='#store_release_value') releaseValue
      //  li='- '
      //    a(href='#store_add_resolver_to_options') addResolverToOptions
      //  li='- '
      //    a(href='#store_resolve_from_options') resolveFromOptions

block api_descriptions
  div.content

    //////////////////////////////////
    // kb.ViewModel
    //////////////////////////////////
    h2#view_model='kb.ViewModel'
    div="Used to generate observables automatically for a model's attributes"
    h4='Super class:'
      a(href='#ref_countable')=' kb.RefCountable'
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      view_model = kb.viewModel(new Backbone.Model({first_name: "Planet", last_name: "Earth"}))

      # Do something then clean up
      # kb.utils.release(view_model); view_model = null

    pre(data-for='js'): code.javascript.
      var view_model = kb.viewModel(new Backbone.Model({first_name: "Planet", last_name: "Earth"}));

      // Do something then clean up
      // kb.utils.release(view_model); view_model = null;

    h3#view_model_extend='kb.ViewModel::extend(properties, [classProperties]) '
      span.label.label-success='class'
    div="Used to derive a class in JavaScript (when CoffeeScript is not used)"
    h4='Example:'
    pre(data-for='js'): code.javascript.
      var ViewModel = kb.ViewModel.extend({
        constructor: function(model){
          kb.ViewModel.prototype.constructor.apply(this, arguments);
          this.full_name = ko.computed(function() { return this.first_name() + " " + this.last_name(); }, this);
        }
      });
      var view_model = new ViewModel(model);

    h3#view_model_create='constructor(model, [options]) or kb.viewModel'
      span.label.label-info='factory'
    div="Used to derive a class in JavaScript (when CoffeeScript is not used)"
    h4='Parameters'
      ol
        li
          strong='model: '
          span.type='{ Backbone.Model }: '
          span='the model whose attributes will be synchronized'
        li
          strong='options: '
          span.label.label-inverse='optional'
          ul
            li='internals '
              span.type='{ [strings] }: '
            li='requires '
              span.type='{ [strings] }: '
            li='children '
              span.type='{ function(model, key, options) | {key: function(model, key, options)} }: '
            li='create '
              span.type='{ function(model, key, options) }: '
            li='read_only '
              span.type='{ boolean }: '

    h4='Example:'
    pre(data-for='cs'): code.coffee.
      # instance
      view_model1 = new kb.ViewModel(model)

      # factory
      view_model2 = kb.viewModel(model)
    pre(data-for='js'): code.javascript.
      // instance
      var view_model1 = new kb.ViewModel(model);

      // factory
      var view_model2 = kb.viewModel(model);

    h3#view_model_model='model([model]) '
      span.label.label-important='dual purpose'
    div="Used to get/set the model"
    h4='Parameters'
      ol
        li
          strong='model: '
          span.type='{ Backbone.Model }: '
          span.label.label-inverse='optional'
          span=' the model to set on the view model '
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      view_model = kb.viewModel(new Backbone.Model({name: 'bob'}))

      # get
      the_model = view_model.model()

      # set
      view_model.model(new Backbone.Model({name: 'fred'}))

    pre(data-for='js'): code.javascript.
      var view_model = kb.viewModel(new Backbone.Model({name: 'bob'}));

      // get
      var the_model = view_model.model();

      // set
      view_model.model(new Backbone.Model({name: 'fred'}));

    //////////////////////////////////
    // kb.Observable
    //////////////////////////////////
    h2#observable='kb.Observable'
    div="Used to generate a single observable for a model's attribute"
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      ContactViewModel = (model) ->
        @name = kb.observable(model, 'name')
        @number = kb.observable(model, {key:'number', read_only: true})
        @

      model = new Contact({name: 'Ringo', number: '555-555-5556'})
      view_model = new ContactViewModel(model)

    pre(data-for='js'): code.javascript.
      var ContactViewModel = function(model) {
        this.name = kb.observable(model, 'name');
        this.number = kb.observable(model, { key: 'number', read_only: true });
      };
      var model = new Contact({
        name: 'Ringo',
        number: '555-555-5556'
      });
      var view_model = new ContactViewModel(model);

    h3#observable_create='constructor(model, mapping_info, [owner]) or kb.observable '
      span.label.label-info='factory'
    div="Used to create a new object"
    h4='Parameters'
      ol
        li
          strong='model: '
          strong='model: '
          span.type='{ Backbone.Model }: '
          span='the model whose attributes will be synchronized '
        li
          strong='mapping_info: '
          span.label.label-inverse='optional'
          ul
            li='read '
              span.type='{ function() }: '
            li='write '
              span.type='{ function(value) }: '
            li='read_only '
              span.type='{ boolean }: '
        li
          strong='owner: '
          span.label.label-inverse='optional'
          span=' required if you need the view model as "this" in your read or write methods '
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      # instance
      name1 = new kb.Observable(model, 'name')

      # factory
      name2 = kb.observable(model, 'name')
    pre(data-for='js'): code.javascript.
      // instance
      var name1 = new kb.Observable(model, 'name');

      // factory
      var name2 = kb.observable(model, 'name');

    h3#observable_destroy='destroy()'
    div="Used to release the memory of the object"

    h3#observable_set_to_default='setToDefault()'
    div="Used to return all of the owned observables to their default values (if they exist)"
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      model = Backbone.Model({name: 'Bob'})
      name = kb.observable(model, {key:'name', default: '(none)'})
      # name is Bob

      name.setToDefault()
      # name is (none)

    pre(data-for='js'): code.javascript.
      var model = Backbone.Model({name: 'Bob'});
      var name = kb.observable(model, {key:'name', default: '(none)'});
      // name is Bob

      name.setToDefault();
      // name is (none)

    //////////////////////////////////
    // kb.Observables
    //////////////////////////////////
    h2#observables='kb.Observables'
    div="Used to generate observables manually for a model's attributes"
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      ContactViewModel = (model) ->
        @attribute_observables = kb.observables(model, {
          name:     {key: 'name', read_only: true}
          number:   'number'
          date:     {key:'date', localizer: LongDateLocalizer}
          name2:    {key: 'name', read_only: true}
        }, this)
        @

      model = new Contact({name: 'John', number: '555-555-5558', date: new Date(1940, 10, 9)})
      view_model = new ContactViewModel(model)

    pre(data-for='js'): code.javascript.
      var ContactViewModel = function(model) {
        this.attribute_observables = kb.observables(model, {
          name:     {key: 'name', read_only: true}
          number:   'number'
          date:     {key:'date', localizer: LongDateLocalizer}
          name2:    {key: 'name', read_only: true}
        }, this);
      };

      var model = new Contact({name: 'John', number: '555-555-5558', date: new Date(1940, 10, 9)});
      view_model = new ContactViewModel(model);

    h3#observables_create='constructor(model, mappings_info, [view_model], [options]) or kb.observables '
      span.label.label-info='factory'
    div="Used to create a new object"
    h4='Parameters'
      ol
        li
          strong='model: '
          span.type='{ Backbone.Model }: '
          span='the model whose attributes will be synchronized '
        li
          strong='mappings_info: '
          span.type=' { [mapping_info as would be passed to each kb.observable | string for an attribute key] + {key: string}}: '
        li
          strong='view_model: '
          span.label.label-inverse='optional'
          span=' the view model target to set the properties for each mapped attribute (the kb.Observables instance itself will always have the generated observables set in its properties) '

        li
          strong='options: '
          span.label.label-inverse='optional'
          span.type=' { boolean for read_only | {read_only: boolean} }: '
          span=' the view model target to set the properties for each mapped attribute (the kb.Observables instance itself will always have the generated observables set in its properties) '
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      # instance
      view_model1 = {}
      new kb.Observables(model, {name: 'name', date: 'date'}, view_model1)

      # factory
      view_model2 = {}
      new kb.observables(model, {name: 'name', date: 'date'}, view_model1)

    pre(data-for='js'): code.javascript.
      // instance
      var view_model1 = {}
      new kb.Observables(model, {name: 'name', date: 'date'}, view_model1)

      // factory
      var view_model2 = {}
      new kb.observables(model, {name: 'name', date: 'date'}, view_model1)

    h3#observables_destroy='destroy()'
    div="Used to release the memory of the object"

    h3#observables_set_to_default='setToDefault()'
    div="Used to return all of the owned observables to their default values (if they exist)"
    pre(data-for='cs'): code.coffee.
      ContactViewModel = (model) ->
        @loading_message = ko.observable('(none)')
        @attribute_observables = kb.observables(model, {
          name:     {key:'name', default: @loading_message}
          number:   {key:'number', default: @loading_message}
        }, this)
        @

      view_model = new ContactViewModel(new Backbone.Model({name: 'Bob'}))
      # name is Bob and number is (none)

      view_model.setToDefault()
      # name and number are (none)

      view_model.loading_message('(nada)')
      # name and number are (nada)

    pre(data-for='js'): code.javascript.
      var ContactViewModel = function(model){
        this.loading_message = ko.observable('(none)');
        this.attribute_observables = kb.observables(model, {
          name:     {key:'name', default: @loading_message},
          number:   {key:'number', default: @loading_message}
        }, this);
      };

      var view_model = new ContactViewModel(new Backbone.Model({name: 'Bob'}));
      // name is Bob and number is (none)

      view_model.attribute_observables.setToDefault()
      // name and number are (none)

      view_model.loading_message('(nada)')
      // name and number are (nada)

    //////////////////////////////////
    // kb.CollectionObservable
    //////////////////////////////////
    h2#collection_observable='kb.CollectionObservable'
    div="Used to generate ViewModels automatically for a collections's models"
    h4='Super class:'
      a(href='#ref_countable')=' kb.RefCountable'
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      view_model =
        todos: kb.collectionObservable(new Backbone.Collection([{name: 'name1'}, {name: 'name2'}]))

    pre(data-for='js'): code.javascript.
      var view_model = {
        todos: kb.collectionObservable(new Backbone.Collection([{name: 'name1'}, {name: 'name2'}]))
      };

    h3#collection_observable_create='constructor(collection, [options]) or kb.collectionObservable '
      span.label.label-info='factory'
    div="Used to create a new object"
    h4='Parameters'
      ol
        li
          strong='model: '
          strong='model: '
          span.type='{ Backbone.Collection }: '
          span='the collection to synchronize with model additions, removals, and resorting '
        li
          strong='options: '
          span.label.label-inverse='optional'
          ul
            li='view_model '
              span.type='{ constructor(model, options) }: '
            li='view_model_create '
              span.type='{ function(model, options) }: '
            li='create '
              span.type='{ function(model, options) }: '
            li='sort_attribute '
              span.type='{ string }: '
            li='sorted_index '
              span.type='{ function(models | view_models, model_to_add | view_model_to_add) }: '
            li='defer '
              span.type='{ boolean }: '
            //li='store '
            //  span.type='{ function(model, options) }: '
            //li='store_skip_resolve '
            //  span.type='{ boolean }: '
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      # instance
      todos1 = new kb.CollectionObservable(new Backbone.Collection([{name: 'name1'}, {name: 'name2'}]))

      # factory
      todos2 = kb.collectionObservable(new Backbone.Collection([{name: 'name1'}, {name: 'name2'}]))
    pre(data-for='js'): code.javascript.
      // instance
      var todos1 = new kb.CollectionObservable(new Backbone.Collection([{name: 'name1'}, {name: 'name2'}]));

      // factory
      var todos2 = kb.collectionObservable(new Backbone.Collection([{name: 'name1'}, {name: 'name2'}]));

    h3#collection_observable_collection='collection([collection], [options]) '
      span.label.label-important='dual purpose'
    div="Used to get/set the collection"
    h4='Parameters'
      ol
        li
          strong='collection '
          span.type='{ Backbone.Collection }: '
          span.label.label-inverse='optional'
          span=' the collection to synchronize with model additions, removals, and resorting '
        li
          strong='options: '
          span.label.label-inverse='optional'
          ul
            li='silent '
              span.type='{ boolean }: '
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      todos1 = new kb.CollectionObservable(new Backbone.Collection())

      # get
      current_collection = todos1.collection()

      # set
      todos1.collection(new Backbone.Collection([{name: 'name3'}, {name: 'name4'}]))

    pre(data-for='js'): code.javascript.
      var todos1 = new kb.CollectionObservable(new Backbone.Collection();

      # get
      var current_collection = todos1.collection();

      # set
      todos1.collection(new Backbone.Collection([{name: 'name3'}, {name: 'name4'}]));

    h3#collection_observable_sorted_index='sortedIndex(sorted_index, [sort_attribute], [options])'
    div="Sets the sorted_index function for sorting Models or ViewModels in the collection observable"
    pre(data-for='cs'): code.coffee.
      # change the sorting function
      collection_observable.sortedIndex(
        ((view_models, vm) -> _.sortedIndex(view_models, vm, (test) -> kb.utils.wrappedModel(test).get('name')))
      )

    pre(data-for='js'): code.javascript.
      // change the sorting function
      collection_observable.sortedIndex(
        function(view_models, vm){
          return _.sortedIndex(view_models, vm, (test) -> kb.utils.wrappedModel(test).get('name'));
        }
      );

    h3#collection_observable_sort_attribute='sortAttribute((sort_attribute, [sorted_index], [silent]))'
    div="Sets the sort attribute name for the collection observable"
    pre(data-for='cs'): code.coffee.
      todos1 = new kb.CollectionObservable(new Backbone.Collection([{name: 'Zanadu', name: 'Alex'}]))
      # in order of Zanadu then Alex

      todos1.sortAttribute('name')
      # in order of Alex then Zanadu

    pre(data-for='js'): code.javascript.
      var todos1 = new kb.CollectionObservable(new Backbone.Collection([{name: 'Zanadu', name: 'Alex'}]));
      // in order of Zanadu then Alex

      todos1.sortAttribute('name');
      // in order of Alex then Zanadu

    h3#collection_observable_has_view_models='hasViewModels()'
    div="Returns true if the collection observable was initialized with a view model create option (and hence generates view models for each model)"
    pre(data-for='cs'): code.coffee.
      todos1 = new kb.CollectionObservable(new Backbone.Collection())
      todos1.hasViewModels()      # false

      todos2 = new kb.CollectionObservable(new Backbone.Collection(), {view_model: kb.ViewModel})
      todos2.hasViewModels()      # true

    pre(data-for='js'): code.javascript.
      var todos1 = new kb.CollectionObservable(new Backbone.Collection());
      todos1.hasViewModels();     // false

      var todos2 = new kb.CollectionObservable(new Backbone.Collection(), {view_model: kb.ViewModel});
      todos2.hasViewModels();     // true

    //////////////////////////////////
    // kb.utils
    //////////////////////////////////
    h2#utils='kb.utils'
    div="Library for general-purpose utilities "

    h3#utils_release='Knockback.utils.release(obj)'
    div="Releases any type of view model or observable using the conventions of release(), destroy(), dispose()"
    pre(data-for='cs'): code.coffee.
      view_model = kb.viewModel(model)
      kb.utils.release(view_model); view_model = null

      todos = kb.collectionObservable(collection)
      kb.utils.release(todos); todos = null

    pre(data-for='js'): code.javascript.
      var view_model = kb.viewModel(model);
      kb.utils.release(view_model); view_model = null;

      var todos = kb.collectionObservable(collection);
      kb.utils.release(todos); todos = null;

    h3#utils_wrapped_model='Knockback.utils.wrappedModel(view_model {, model})'
      span.label.label-important='dual purpose'
    div="Used to get/set a Model on a ViewModel. During a get, if the ViewModel has no Model, it returns the ViewModel itself (mainly to simplify collection sorting)"
    h4='Parameters'
      ol
        li
          strong='view_model '
          span.type='{ object | kb.ViewModel }: '
          span=' the ViewModel that owns the Model '
        li
          strong='model: '
          span.type='{ object | kb.ViewModel }: '
          span.label.label-inverse='optional'
          span=' the Model to set '
    pre(data-for='cs'): code.coffee.
      view_model = kb.viewModel(model)

      same_model = kb.utils.wrappedModel(view_model)

    pre(data-for='js'): code.javascript.
      var view_model = kb.viewModel(model);

      var same_model = kb.utils.wrappedModel(view_model);

    h3#utils_set_to_default='Knockback.utils.setToDefault(obj)'
    div="Used to return all of the nested observables to their default values (if they exist)"
    h4='Parameters'
      ol
        li
          strong='obj '
          span.type='{ object | Knockback observable with setToDefault() }: '
          span=' the target for reset '
    pre(data-for='cs'): code.coffee.
      model = new Backbone.Model({name: 'Bob'})
      view_model =
        wrapped_name: kb.defaultWrapper(kb.observable(model, 'name'), "(no name)")
      # view_model.wrapped name: Bob

      kb.utils.setToDefault(view_model)
      # view_model.wrapped name: (no name)

    pre(data-for='js'): code.javascript.
      var model = new Backbone.Model({name: 'Bob'});
      var view_model = {
        wrapped_name: kb.defaultWrapper(kb.observable(model, 'name'), "(no name)")
      };
      // view_model.wrapped name: Bob

      kb.utils.setToDefault(view_model);
      // view_model.wrapped name: (no name)

    h3#utils_observable_instance_of='kb.utils.observableInstanceOf(observable, class)'
    div="Checks the class type of the underlying class on a Knockback observable"
    p
      strong='Please note:'
      span=" classes start with a capital letter (eg. kb.CollectionObservable) whereas factory methods start with a lower case letter (eg. kb.collectionObservable)"
    pre(data-for='cs'): code.coffee.
      todos = new kb.CollectionObservable(new Backbone.Collection([{name: 'name1'}, {name: 'name2'}]))

      kb.utils.observableInstanceOf(todos, kb.CollectionObservable) # true
      kb.utils.observableInstanceOf(todos, kb.collectionObservable) # false (factory function not class!)

    pre(data-for='js'): code.javascript.
      var todos = new kb.CollectionObservable(new Backbone.Collection([{name: 'name1'}, {name: 'name2'}]))'

      kb.utils.observableInstanceOf(todos, kb.CollectionObservable); // true
      kb.utils.observableInstanceOf(todos, kb.collectionObservable); // false (factory function not class!)

    h3#utils_wrapped_observable='wrappedObservable(instance {, observable})'
    div="Used to get/set a observable an owning instance. Mainly used as a helper so you can return a ko.observable function instead of an instance when creating a new Knockback or Knockback-derived instance."
    h4='Parameters'
      ol
        li
          strong='instance '
          span.type='{ any Knockout observable being used by Knockback }: '
        li
          strong='observable: '
          span.type='{ a Knockback or Knockout-derived class }: '
          span.label.label-inverse='optional'
    pre(data-for='cs'): code.coffee.
      class ShortDateLocalizer extends kb.LocalizedObservable
        constructor: (value, options, view_model) ->
          super; return kb.utils.wrappedObservable(this)

    pre(data-for='js'): code.javascript.
      var ShortDateLocalizer = kb.LocalizedObservable.extend({
        constructor: function(value, options, view_model) {
          kb.LocalizedObservable.prototype.constructor.apply(this, arguments);
          return kb.utils.wrappedObservable(this);
        }
      });

    //h3#utils_options_create_clear='optionsCreateClear(options)'
    //div="TODO"
    //pre(data-for='cs'): code.coffee.
    //  TODO
    //pre(data-for='js'): code.javascript.
    //  TODO

    //h3#utils_options_create_override='optionsCreateOverride(options, create_options)'
    //div="TODO"
    //pre(data-for='cs'): code.coffee.
    //  TODO
    //pre(data-for='js'): code.javascript.
    //  TODO

    //////////////////////////////////
    // kb.LocalizedObservable
    //////////////////////////////////
    h2#localized_observable='kb.LocalizedObservable'
    div="Used to generate an observable that automatically changes when the kb.LocaleManager's locale changes"
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      class ShortDateLocalizer extends kb.LocalizedObservable
        constructor: (value, options, view_model) ->
          super; return kb.utils.wrappedObservable(this)

        read: (value) -> # return something
        write: (localized_string, value) -> # do something

      ViewModel = (model) ->
        @localized_date = kb.observable(model, {
          key: 'date',
          "default": this.loading_message,
          localizer: ShortDateLocalizer
        }, @)
        @
      view_model = new ViewModel(new Backbone.Model({date: new Date()}))

    pre(data-for='js'): code.javascript.
      var ShortDateLocalizer = kb.LocalizedObservable.extend({
        constructor: function(value, options, view_model) {
          kb.LocalizedObservable.prototype.constructor.apply(this, arguments);
          return kb.utils.wrappedObservable(this);
        },

        read: function(value) { /* return something */ },
        write: function(localized_string, value) { /* do something */ }
      });
      var ViewModel = function(model) {
        this.localized_date = kb.observable(model, {
          key: 'date',
          "default": this.loading_message,
          localizer: ShortDateLocalizer
        }, this);
      };
      var view_model = new ViewModel(new Backbone.Model({date: new Date()}));

    h3#localized_observable_extend='kb.LocalizedObservable::extend(properties, [classProperties]) '
      span.label.label-success='class'
    div="Used to derive a class in JavaScript (when CoffeeScript is not used)"
    h4='Example:'
    pre(data-for='js'): code.javascript.
      var ShortDateLocalizer = kb.LocalizedObservable.extend({
        constructor: function(value, options, view_model) {
          kb.LocalizedObservable.prototype.constructor.apply(this, arguments);
          return kb.utils.wrappedObservable(this);
        },
        read: function(value) {
          // return something
        },
        write: function(localized_string, value) {
          // do something
        }
      });

    h3#localized_observable_constructor='constructor([value], [options], [view_model])'
    div="Used to create a new object. For localized observables, creation is often indirect."
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      ContactViewModelDate = (model) ->
        @date = kb.observable(model, {key:'date', localizer: LongDateLocalizer}, this)
        @

    pre(data-for='js'): code.javascript.
      var ContactViewModelDate = function(model){
        @date = kb.observable(model, {key:'date', localizer: LongDateLocalizer}, this)
      };

    h3#localized_observable_destroy='destroy()'
    div="Used to release the memory of the object"

    h3#localized_observable_set_to_default='setToDefault()'
    div="Used to return the observable to its default value (if it exists)"

    h3#localized_observable_reset_to_current='resetToCurrent()'
    div="Used to return the observable to the value of its target (for example returning an input field to the last good state)"

    h3#localized_observable_observed_value='observedValue([value]) '
      span.label.label-important='dual purpose'
    div="Used to get/set the value that the localized observable is changing when the kb.LocaleManager changes"
    h4='Parameters'
      ol
        li
          strong='value: '
          span.type='{ a Knockback or Knockout-derived class }: '
          span.label.label-inverse='optional'
          span=' the target that the localized observable synchronizes with on kb.LocaleManager changes '

    //////////////////////////////////
    // kb.FormattedObservable
    //////////////////////////////////
    h2#formatted_observable='kb.FormattedObservable'
    div="Used to reformat a string when an argument changes. The format string can also be an observable."
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      formatted_name = kb.formattedObservable("{1}...cool!", kb.observable(model, 'name'))

    pre(data-for='js'): code.javascript.
      var formatted_name = kb.formattedObservable("{1}...cool!", kb.observable(model, 'name'));

    h3#formatted_observable_create='constructor(format, args...) or kb.formattedObservable '
      span.label.label-info='factory'
    div="Used to create a new object"
    h4='Parameters'
      ol
        li
          strong='format: '
          span=' a format string such as "{0} and {1}" where {0} and {1} would be synchronized with the arguments (eg. "Bob and Carol" where {0} is Bob and {1} is Carol)'
        li
          strong="args: "
          span=" all arguments to be passed to the kb.LocaleManager's get() method"
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      name = kb.observable(model, 'name')

      # instance
      formatted_name1 = new kb.FormattedObservable("{1}...cool!", name)

      # factory
      formatted_name2 = kb.formattedObservable("{1}...cool!", name)

    pre(data-for='js'): code.javascript.
      var name = kb.observable(model, 'name');

      # instance
      var formatted_name1 = new kb.FormattedObservable("{1}...cool!", name);

      # factory
      var formatted_name2 = kb.formattedObservable("{1}...cool!", name);

    h3#formatted_observable_destroy='destroy()'
    div="Used to release the memory of the object"

    //////////////////////////////////
    // kb.DefaultWrapper
    //////////////////////////////////
    h2#default_wrapper='kb.DefaultWrapper'
    div="Used to provide a default value if an observable's value is null or undefined"
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      wrapped_name = kb.defaultWrapper(kb.observable(model, 'name'), "(no name)")

    pre(data-for='js'): code.javascript.
      var wrapped_name = kb.defaultWrapper(kb.observable(model, 'name'), "(no name)");

    h3#default_wrapper_create='constructor(target_observable, default_value_observable) or kb.defaultWrapper '
      span.label.label-info='factory'
    div="Used to create a new object"
    h4='Parameters'
      ol
        li
          strong='target_observable '
          span.type='{ any observable }: '
        li
          strong='default_value_observable '
          span.type='{ an observable or constant }: '
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      name = kb.observable(model, 'name')

      # instance
      wrapped_name1 = new kb.FormattedObservable(name, "(no name)")

      # factory
      wrapped_name2 = kb.formattedObservable(name, "(no name)")

    pre(data-for='js'): code.javascript.
      var name = kb.observable(model, 'name');

      # instance
      var wrapped_name1 = new kb.FormattedObservable(name, "(no name)");

      # factory
      var wrapped_name2 = kb.formattedObservable(name, "(no name)");

    h3#default_wrapper_destroy='destroy()'
    div="Used to release the memory of the object"

    //////////////////////////////////
    // kb.TriggeredObservable
    //////////////////////////////////
    h2#triggered_observable='kb.TriggeredObservable'
    div="Used to recalculate a value when model's attribute changes value"
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      trigger_count = 0
      model = new Backbone.Model()

      view_model =
        triggered_observable: kb.triggeredObservable(model, 'change')
      view_model.counter = ko.dependentObservable(->
        view_model.triggered_observable() # add a dependency
        return trigger_count++
      )

      model.set(name: 'bob')      # trigger_count: 1
      model.set(name: 'george')   # trigger_count: 2
      model.set(last: 'smith')    # trigger_count: 3

    pre(data-for='js'): code.javascript.
      var trigger_count = 0;
      var model = new Backbone.Model();

      var view_model = {
        triggered_observable: kb.triggeredObservable(model, 'change')
      };
      view_model.counter = ko.dependentObservable(function() {
        view_model.triggered_observable() // add a dependency
        return trigger_count++
      });

      model.set(name: 'bob');       # trigger_count: 1
      model.set(name: 'george');    # trigger_count: 2
      model.set(last: 'smith');     # trigger_count: 3

    h3#triggered_observable_create='constructor(model, event_name) or kb.triggeredObservable '
      span.label.label-info='factory'
    div="Used to create a new object"
    h4='Parameters'
      ol
        li
          strong='model: '
          span.type='{ Backbone.Model }: '
          span='the model to bind to'
        li
          strong='event_name: '
          span.type='{ string }: '
          span='a key to bind to changes on for Backbone.Events'
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      # instance
      triggered_observable1 = new kb.TriggeredObservable(name, 'change')

      # factory
      triggered_observable2 = kb.triggeredObservable(name, 'change')

    pre(data-for='js'): code.javascript.
      # instance
      var triggered_observable1 = new kb.TriggeredObservable(name, 'change');

      # factory
      var triggered_observable2 = kb.triggeredObservable(name, 'change');

    h3#triggered_observable_destroy='destroy'
    div="Used to release the memory of the object"

    //////////////////////////////////
    // kb.RefCountable
    //////////////////////////////////
    h2#ref_countable='kb.RefCountable'
    div="The base class for all reference-counted classes"
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      class MyClass extends kb.RefCountable
        constructor: ->
          super
          # do something

        __destroy: ->
          # clean up
          super

      my_instance = new MyClass()  # ref count: 1

      my_instance.retain()    # ref count: 2
      my_instance.release()   # ref count: 1

      my_instance.release()   # ref count: 0 and __destroy() called

    pre(data-for='js'): code.javascript.
      var MyClass = kb.RefCountable.extend({
        constructor: function(){
          kb.RefCountable.prototype.constructor.apply(this, arguments);
          // do something
        },
        __destroy: function(){
          // clean up
          kb.RefCountable.prototype.__destroy.apply(this, arguments);
        }
      });
      var my_instance = new MyClass();  // ref count: 1

      my_instance.retain();   // ref count: 2
      my_instance.release();  // ref count: 1

      my_instance.release();  // ref count: 0 and __destroy() called

    h3#ref_countable_extend='kb.RefCountable::extend(properties, [classProperties]) '
      span.label.label-success='class'
    div="Used to derive a class in JavaScript (when CoffeeScript is not used)"
    h4='Example:'
    pre(data-for='js'): code.javascript.
      var MyClass = kb.RefCountable.extend({
        constructor: function(model){
          kb.RefCountable.prototype.constructor.apply(this, arguments);
          // to something
        }
      });

    h3#ref_countable_constructor='constructor'
    div="Used to create a new object"

    h3#ref_countable_retain='retain()'
    div="Increases reference count by 1"
    pre(data-for='cs'): code.coffee.
      my_instance.retain()
    pre(data-for='js'): code.javascript.
      my_instance.retain();

    h3#ref_countable_ref_count='refCount()'
    div="Returns the current reference count"
    pre(data-for='cs'): code.coffee.
      my_instance.refCount()
    pre(data-for='js'): code.javascript.
      my_instance.refCount();

    h3#ref_countable_release='release()'
    div="Decreases reference count by 1 and calls __destroy() when ref_count becomes 0"
    pre(data-for='cs'): code.coffee.
      my_instance.release()
    pre(data-for='js'): code.javascript.
      my_instance.release();

    h3#ref_countable___destroy='__destroy() '
      span.label='abstract'
    div="Called when reference count becomes 0"
    pre(data-for='cs'): code.coffee.
      my_instance = new MyClass()       # ref count: 1
      my_instance.release()             # ref count: 0 and __destroy() called
    pre(data-for='js'): code.javascript.
      var my_instance = new MyClass();  // ref count: 1
      my_instance.release();            // ref count: 0 and __destroy() called

    //////////////////////////////////
    // kb.Store
    //////////////////////////////////
    //h2#store='kb.Store'
    //div="Used to manage the persistence and sharing of ViewModels and observables (mainly to break relationship cycles between models)."
    //h4='Example:'
    //pre(data-for='cs'): code.coffee.
    //  TODO
    //pre(data-for='js'): code.javascript.
    //  TODO

    //h3#store_constructor='constructor()'
    //div="Used to create a new object"
    //pre(data-for='cs'): code.coffee.
    //  TODO
    //pre(data-for='js'): code.javascript.
    //  TODO

    //h3#store_destroy='destroy()'
    //div="Used to release the memory of the object"

    //h3#store_register_value='registerValue(key, value)'
    //div="TODO"
    //pre(data-for='cs'): code.coffee.
    //  TODO
    //pre(data-for='js'): code.javascript.
    //  TODO

    //h3#store_resolve_value='resolveValue(key, create_fn, args)'
    //div="TODO"
    //pre(data-for='cs'): code.coffee.
    //  TODO
    //pre(data-for='js'): code.javascript.
    //  TODO

    //h3#store_releaseValue='releaseValue(value)'
    //div="TODO"
    //pre(data-for='cs'): code.coffee.
    //  TODO
    //pre(data-for='js'): code.javascript.
    //  TODO

    //h3#store_add_resolver_to_options='addResolverToOptions(options, key)'
    //div="TODO"
    //pre(data-for='cs'): code.coffee.
    //  TODO
    //pre(data-for='js'): code.javascript.
    //  TODO

    //h3#store_resolve_from_options='kb.Store::resolveFromOptions(options, value) '
    //  span.label.label-success='class'
    //div="TODO"
    //pre(data-for='cs'): code.coffee.
    //  TODO
    //pre(data-for='js'): code.javascript.
    //  TODO

block content
  div.api.container
    h1="Knockback.js API and Usage Examples"
    div.container-fluid
      div.row-fluid
        div.span4.api.index
          block api_index
        div.span8.api.descriptions
          block api_descriptions
