extends _jade_includes/layout

block title
  title= "Knockback.js Docs"

block includes
  link(rel="stylesheet",href="stylesheets/docs.css")

block navbar
  include _jade_includes/layout_components/page_navbar
  mixin pageNavbar('Docs', true)

block api_index
  div.content
    ul

      //////////////////////////////////
      // kb.ViewModel
      //////////////////////////////////
      li.type
        a(href='#view_model') kb.ViewModel
        li='- '
          a(href='#view_model_extend') extend
        li='- '
          a(href='#view_model_create') constructor or kb.viewModel
        li='- '
          a(href='#view_model_model') model

      //////////////////////////////////
      // kb.Observable
      //////////////////////////////////
      li.type
        a(href='#observable') kb.Observable
        li='- '
          a(href='#observable_create') constructor or kb.observable
        li='- '
          a(href='#observable_destroy') destroy
        li='- '
          a(href='#observable_set_to_default') setToDefault

      //////////////////////////////////
      // kb.Observables
      //////////////////////////////////
      li.type
        a(href='#observables') kb.Observables
        li='- '
          a(href='#observables_create') constructor or kb.observables
        li='- '
          a(href='#observable_destroy') destroy
        li='- '
          a(href='#observable_set_to_default') setToDefault

      //////////////////////////////////
      // kb.CollectionObservable
      //////////////////////////////////
      li.type
        a(href='#collection_observable') kb.CollectionObservable
        li='- '
          a(href='#collection_observable_create') constructor or kb.collectionObservable
        li='- '
          a(href='#collection_observable_collection') collection
        li='- '
          a(href='#collection_observable_sorted_index') sortedIndex
        li='- '
          a(href='#collection_observable_sort_attribute') sortAttribute
        li='- '
          a(href='#collection_observable_has_view_models') hasViewModels

      //////////////////////////////////
      // kb.utils
      //////////////////////////////////
      li.type
        a(href='#utils') kb.utils
        li='- '
          a(href='#utils_release') release
        li='- '
          a(href='#utils_wrapped_model') wrappedModel
        li='- '
          a(href='#utils_set_to_deafult') setToDefault
        li='- '
          a(href='#utils_observable_instance_of') observableInstanceOf
        li='- '
          a(href='#utils_wrapped_observable') wrappedObservable
        li='- '
          a(href='#utils_options_create_clear') optionsCreateClear
        li='- '
          a(href='#utils_options_create_override') optionsCreateOverride

      //////////////////////////////////
      // kb.LocalizedObservable
      //////////////////////////////////
      li.type
        a(href='#localized_observable') kb.LocalizedObservable
        li='- '
          a(href='#localized_observable_extend') extend
        li='- '
          a(href='#localized_observable_constructor') constructor
        li='- '
          a(href='#localized_observable_destroy') destroy
        li='- '
          a(href='#localized_observable_set_to_default') setToDefault
        li='- '
          a(href='#localized_observable_reset_to_current') resetToCurrent
        li='- '
          a(href='#localized_observable_observed_value') observedValue

      //////////////////////////////////
      // kb.FormattedObservable
      //////////////////////////////////
      li.type
        a(href='#formatted_observable') kb.FormattedObservable
        li='- '
          a(href='#formatted_observable_create') constructor or kb.formattedObservable
        li='- '
          a(href='#formatted_observable_destroy') destroy

      //////////////////////////////////
      // kb.DefaultWrapper
      //////////////////////////////////
      li.type
        a(href='#default_wrapper') kb.DefaultWrapper
        li='- '
          a(href='#default_wrapper_create') constructor or kb.defaultWrapper
        li='- '
          a(href='#default_wrapper_destroy') destroy

      //////////////////////////////////
      // kb.TriggeredObservable
      //////////////////////////////////
      li.type
        a(href='#triggered_observable') kb.TriggeredObservable
        li='- '
          a(href='#triggered_observable_create') constructor or kb.triggeredObservable
        li='- '
          a(href='#triggered_observable_destroy') destroy

      //////////////////////////////////
      // kb.RefCountable
      //////////////////////////////////
      li.type
        a(href='#ref_countable') kb.RefCountable
        li='- '
          a(href='#ref_countable_extend') extend
        li='- '
          a(href='#ref_countable_constructor') constructor
        li='- '
          a(href='#ref_countable_retain') retain
        li='- '
          a(href='#ref_countable_ref_count') refCount
        li='- '
          a(href='#ref_countable_release') release
        li='- '
          a(href='#ref_countable___destroy') __destroy

      //////////////////////////////////
      // kb.Store
      //////////////////////////////////
      li.type
        a(href='#store') kb.Store
        li='- '
          a(href='#store_constructor') constructor
        li='- '
          a(href='#store_destroy') destroy
        li='- '
          a(href='#store_register_value') registerValue
        li='- '
          a(href='#store_resolve_value') resolveValue
        li='- '
          a(href='#store_release_value') releaseValue
        li='- '
          a(href='#store_add_resolver_to_options') addResolverToOptions
        li='- '
          a(href='#store_resolve_from_options') resolveFromOptions

block api_descriptions
  div.content

    //////////////////////////////////
    // kb.ViewModel
    //////////////////////////////////
    h2#view_model='kb.ViewModel'
    div="Used to generate observables automatically for a model's attributes"
    h4='Super class:'
      a(href='#ref_countable')=' kb.RefCountable'
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      view_model = kb.viewModel(new Backbone.Model({first_name: "Planet", last_name: "Earth"}))

      # Do something then clean up
      # kb.utils.release(view_model); view_model = null

    pre(data-for='js'): code.javascript.
      var view_model = kb.viewModel(new Backbone.Model({first_name: "Planet", last_name: "Earth"}));

      // Do something then clean up
      // kb.utils.release(view_model); view_model = null;

    h3#view_model_extend='kb.ViewModel::extend(properties, [classProperties]) '
      span.label.label-success='class'
    div="Used to derive a class in JavaScript (when CoffeeScript is not used)"
    h4='Example:'
    pre(data-for='js'): code.javascript.
      var ViewModel = kb.ViewModel.extend({
        constructor: function(model){
          kb.ViewModel.prototype.constructor.apply(this, arguments);
          this.full_name = ko.computed(function() { return this.first_name() + " " + this.last_name(); }, this);
        }
      });
      var view_model = new ViewModel(model);

    h3#view_model_create='constructor(model, [options]) or kb.viewModel'
      span.label.label-info='factory'
    div="Used to derive a class in JavaScript (when CoffeeScript is not used)"
    h4='Parameters'
      ol
        li
          strong='model: '
          span='the model whose attributes will be synchronized'
        li
          strong='options: '
          span='TODO '
          span.label.label-inverse='optional'
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      # instance
      view_model1 = new kb.ViewModel(model)

      # factory
      view_model2 = kb.viewModel(model)
    pre(data-for='js'): code.javascript.
      // instance
      var view_model1 = new kb.ViewModel(model);

      // factory
      var view_model2 = kb.viewModel(model);

    h3#view_model_model='model([model]) '
      span.label.label-important='dual purpose'
    div="Used to get/set the model"
    h4='Parameters'
      ol
        li
          strong='model: '
          span='the model to set on the view model '
          span.label.label-inverse='optional'
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      view_model = kb.viewModel(new Backbone.Model({name: 'bob'}))

      # get
      the_model = view_model.model()

      # set
      view_model.model(new Backbone.Model({name: 'fred'}))

    pre(data-for='js'): code.javascript.
      var view_model = kb.viewModel(new Backbone.Model({name: 'bob'}));

      // get
      var the_model = view_model.model();

      // set
      view_model.model(new Backbone.Model({name: 'fred'}));

    //////////////////////////////////
    // kb.Observable
    //////////////////////////////////
    h2#observable='kb.Observable'
    div="Used to generate a single observable for a model's attribute"
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    h3#observable_create='constructor(model, options, [owner]) or kb.observable '
      span.label.label-info='factory'
    div="Used to create a new object"
    h4='Parameters'
      ol
        li
          strong='model: '
          span='TODO '
        li
          strong='options: '
          span='TODO '
        li
          strong='owner: '
          span='TODO '
          span.label.label-inverse='optional'
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    h3#observable_destroy='destroy()'
    div="Used to release the memory of the object"

    h3#observable_set_to_default='setToDefault()'
    div="Used to return all of the owned observables to their default values (if they exist)"
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    //////////////////////////////////
    // kb.Observables
    //////////////////////////////////
    h2#observables='kb.Observables'
    div="Used to generate observables manually for a model's attributes"
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    h3#observables_create='constructor(model, mappings_info, [view_model], [options]) or kb.observables '
      span.label.label-info='factory'
    div="Used to create a new object"
    h4='Parameters'
      ol
        li
          strong='model: '
          span='TODO '
        li
          strong='mappings_info: '
          span='TODO '
        li
          strong='view_model: '
          span='TODO '
          span.label.label-inverse='optional'
        li
          strong='options: '
          span='TODO '
          span.label.label-inverse='optional'
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    h3#observables_destroy='destroy()'
    div="Used to release the memory of the object"

    h3#observables_set_to_default='setToDefault()'
    div="Used to return all of the owned observables to their default values (if they exist)"
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    //////////////////////////////////
    // kb.CollectionObservable
    //////////////////////////////////
    h2#collection_observable='kb.CollectionObservable'
    div="Used to generate ViewModels automatically for a collections's models"
    h4='Super class:'
      a(href='#ref_countable')=' kb.RefCountable'
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    h3#collection_observable_create='constructor(collection, [options]) or kb.collectionObservable '
      span.label.label-info='factory'
    div="Used to create a new object"
    h4='Parameters'
      ol
        li
          strong='collection: '
          span='TODO '
        li
          strong='options: '
          span='TODO '
          span.label.label-inverse='optional'
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    h3#collection_observable_collection='collection([collection], [options]) '
      span.label.label-important='dual purpose'
    div="Used to get/set the collection"
    h4='Parameters'
      ol
        li
          strong='collection: '
          span='TODO '
          span.label.label-inverse='optional'
        li
          strong='options: '
          span='TODO '
          span.label.label-inverse='optional'
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    h3#collection_observable_sorted_index='sortedIndex(sorted_index, [sort_attribute], [options])'
    div="TODO"
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    h3#collection_observable_sort_attribute='sortAttribute((sort_attribute, [sorted_index], [silent]))'
    div="TODO"
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    h3#collection_observable_has_view_models='hasViewModels()'
    div="TODO"
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    //////////////////////////////////
    // kb.utils
    //////////////////////////////////
    h2#utils='kb.utils'
    div="Library for general-purpose utilities "

    h3#utils_release='Knockback.utils.release(obj)'
    div="TODO"
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    h3#utils_wrapped_model='Knockback.utils.wrappedModel(view_model {, model})'
      span.label.label-important='dual purpose'
    div="Used to get/set a Model on a ViewModel. During a get, if the ViewModel has no Model, it returns the ViewModel itself (mainly to simplify collection sorting)"
    h4='Parameters'
      ol
        li
          strong='view_model: '
          span='TODO '
        li
          strong='model: '
          span='TODO '
          span.label.label-inverse='optional'
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    h3#utils_set_to_default='Knockback.utils.setToDefault(obj)'
    div="Used to return all of the nested observables to their default values (if they exist)"
    h4='Parameters'
      ol
        li
          strong='obj: '
          span='TODO'
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    h3#utils_observable_instance_of='kb.utils.observableInstanceOf(observable, class)'
    div="Checks the class type of the underlying class on a Knockback observable"
    p
      strong='Please note:'
      span=" classes start with a capital letter (eg. kb.CollectionObservable) whereas factory methods start with a lower case letter (eg. kb.collectionObservable)"
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    h3#utils_wrapped_observable='wrappedObservable(instance {, observable})'
    div="Used to get/set a observable an owning instance. Mainly used as a helper so you can return a ko.observable function instead of an instance when creating a new Knockback or Knockback-derived instance."
    h4='Parameters'
      ol
        li
          strong='instance: '
          span='TODO '
        li
          strong='observable: '
          span='TODO '
          span.label.label-inverse='optional'
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    h3#utils_options_create_clear='optionsCreateClear(options)'
    div="TODO"
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    h3#utils_options_create_override='optionsCreateOverride(options, create_options)'
    div="TODO"
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    //////////////////////////////////
    // kb.LocalizedObservable
    //////////////////////////////////
    h2#localized_observable='kb.LocalizedObservable'
    div="Used to generate an observable that automatically changes when the kb.LocaleManager's locale changes"
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      class ShortDateLocalizer extends kb.LocalizedObservable
        constructor: (value, options, view_model) ->
          super; return kb.utils.wrappedObservable(this)

        read: (value) -> # return something
        write: (localized_string, value) -> # do something

      ViewModel = (model) ->
        @localized_date = kb.observable(model, {
          key: 'date',
          "default": this.loading_message,
          localizer: ShortDateLocalizer
        }, @)
        @
      view_model = new ViewModel(new Backbone.Model({date: new Date()}))

    pre(data-for='js'): code.javascript.
      var ShortDateLocalizer = kb.LocalizedObservable.extend({
        constructor: function(value, options, view_model) {
          kb.LocalizedObservable.prototype.constructor.apply(this, arguments);
          return kb.utils.wrappedObservable(this);
        },

        read: function(value) { /* return something */ },
        write: function(localized_string, value) { /* do something */ }
      });
      var ViewModel = function(model) {
        this.localized_date = kb.observable(model, {
          key: 'date',
          "default": this.loading_message,
          localizer: ShortDateLocalizer
        }, this);
      };
      var view_model = new ViewModel(new Backbone.Model({date: new Date()}));

    h3#localized_observable_extend='kb.LocalizedObservable::extend(properties, [classProperties]) '
      span.label.label-success='class'
    div="Used to derive a class in JavaScript (when CoffeeScript is not used)"
    h4='Example:'
    pre(data-for='js'): code.javascript.
      var ShortDateLocalizer = kb.LocalizedObservable.extend({
        constructor: function(value, options, view_model) {
          kb.LocalizedObservable.prototype.constructor.apply(this, arguments);
          return kb.utils.wrappedObservable(this);
        },
        read: function(value) {
          // return something
        },
        write: function(localized_string, value) {
          // do something
        }
      });

    h3#localized_observable_constructor='constructor([value], [options], [view_model])'
    div="TODO"
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    h3#localized_observable_destroy='destroy()'
    div="Used to release the memory of the object"

    h3#localized_observable_set_to_default='setToDefault()'
    div="Used to return the observable to its default value (if it exists)"
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    h3#localized_observable_reset_to_current='resetToCurrent()'
    div="TODO"
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    h3#localized_observable_observed_value='observedValue([value]) '
      span.label.label-important='dual purpose'
    div="Used to get/set the value that the localized observable is changing when the kb.LocaleManager changes"
    h4='Parameters'
      ol
        li
          strong='value: '
          span='TODO '
          span.label.label-inverse='optional'
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    //////////////////////////////////
    // kb.FormattedObservable
    //////////////////////////////////
    h2#formatted_observable='kb.FormattedObservable'
    div="Used to reformat a string when an argument changes. The format string can also be an observable."
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    h3#formatted_observable_create='constructor(format, args...) or kb.formattedObservable '
      span.label.label-info='factory'
    div="Used to create a new object"
    h4='Parameters'
      ol
        li
          strong='format: '
          span='TODO '
        li
          strong="args: all arguments to be passed to the kb.LocaleManager's get() method"
          span='TODO '
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    h3#formatted_observable_destroy='destroy()'
    div="Used to release the memory of the object"

    //////////////////////////////////
    // kb.DefaultWrapper
    //////////////////////////////////
    h2#default_wrapper='kb.DefaultWrapper'
    div="Used to provide a default value if an observable's value is null or undefined"
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    h3#default_wrapper_create='constructor(target_observable, default_value_observable) or kb.defaultWrapper '
      span.label.label-info='factory'
    div="Used to create a new object"
    h4='Parameters'
      ol
        li
          strong='target_observable: '
          span='TODO '
        li
          strong='default_value_observable: '
          span='TODO '
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    h3#default_wrapper_destroy='destroy()'
    div="Used to release the memory of the object"

    //////////////////////////////////
    // kb.TriggeredObservable
    //////////////////////////////////
    h2#triggered_observable='kb.TriggeredObservable'
    div="Used to recalculate a value when model's attribute changes value"
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    h3#triggered_observable_create='constructor(model, event_name) or kb.triggeredObservable '
      span.label.label-info='factory'
    div="Used to create a new object"
    h4='Parameters'
      ol
        li
          strong='model: '
          span='TODO '
        li
          strong='event_name: '
          span='TODO '
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    h3#triggered_observable_destroy='destroy'
    div="Used to release the memory of the object"

    //////////////////////////////////
    // kb.RefCountable
    //////////////////////////////////
    h2#ref_countable='kb.RefCountable'
    div="The base class for all reference-counted classes"
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      class MyClass extends kb.RefCountable
        constructor: ->
          super
          # do something

        __destroy: ->
          # clean up
          super

      my_instance = new MyClass()

      my_instance.retain()
      my_instance.release()

      my_instance.release()

    pre(data-for='js'): code.javascript.
      var MyClass = kb.RefCountable.extend({
        constructor: function(){
          kb.RefCountable.prototype.constructor.apply(this, arguments);
          // do something
        },
        __destroy: function(){
          // clean up
          kb.RefCountable.prototype.__destroy.apply(this, arguments);
        }
      });
      var my_instance = new MyClass();

      my_instance.retain();
      my_instance.release();

      my_instance.release();

    h3#ref_countable_extend='kb.RefCountable::extend(properties, [classProperties]) '
      span.label.label-success='class'
    div="Used to derive a class in JavaScript (when CoffeeScript is not used)"
    h4='Example:'
    pre(data-for='js'): code.javascript.
      var MyClass = kb.RefCountable.extend({
        constructor: function(model){
          kb.RefCountable.prototype.constructor.apply(this, arguments);
          // to something
        }
      });

    h3#ref_countable_constructor='constructor'
    div="TODO"
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    h3#ref_countable_retain='retain()'
    div="TODO"
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    h3#ref_countable_ref_count='refCount()'
    div="TODO"
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    h3#ref_countable_release='release()'
    div="TODO"
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    h3#ref_countable___destroy='__destroy() '
      span.label='abstract'
    div="TODO"
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    //////////////////////////////////
    // kb.Store
    //////////////////////////////////
    h2#store='kb.Store'
    div="Used to manage the persistence and sharing of ViewModels and observables (mainly to break relationship cycles between models)."
    h4='Example:'
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    h3#store_constructor='constructor()'
    div="TODO"
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    h3#store_destroy='destroy()'
    div="Used to release the memory of the object"

    h3#store_register_value='registerValue(key, value)'
    div="TODO"
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    h3#store_resolve_value='resolveValue(key, create_fn, args)'
    div="TODO"
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    h3#store_releaseValue='releaseValue(value)'
    div="TODO"
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    h3#store_add_resolver_to_options='addResolverToOptions(options, key)'
    div="TODO"
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

    h3#store_resolve_from_options='kb.Store::resolveFromOptions(options, value) '
      span.label.label-success='class'
    div="TODO"
    pre(data-for='cs'): code.coffee.
      TODO
    pre(data-for='js'): code.javascript.
      TODO

block content
  div.api.container
    h1="Knockback.js API and Usage Examples"
    div.container-fluid
      div.row-fluid
        div.span4.api.index
          block api_index
        div.span8.api.descriptions
          block api_descriptions
